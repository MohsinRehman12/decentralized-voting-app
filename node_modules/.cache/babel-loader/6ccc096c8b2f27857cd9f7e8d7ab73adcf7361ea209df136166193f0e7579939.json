{"ast":null,"code":"const handleCreateElection = async () => {\n  try {\n    setStatus(\"Creating election...\");\n    setError(null);\n\n    // Validate inputs\n    if (!title || !candidates || !startTime || !endTime) {\n      setError(\"Please fill in all fields.\");\n      setStatus(\"\");\n      return;\n    }\n\n    // Convert times to UNIX timestamps (in UTC)\n    const startTimestamp = new Date(startTime).getTime() / 1000; // Convert to seconds\n    const endTimestamp = new Date(endTime).getTime() / 1000; // Convert to seconds\n\n    if (startTimestamp >= endTimestamp) {\n      setError(\"Start time must be before end time.\");\n      setStatus(\"\");\n      return;\n    }\n\n    // Initialize provider and signer (MetaMask)\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const signerAddress = await signer.getAddress(); // Get signer address\n\n    const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n\n    // Check if signer is the contract owner\n    const contractOwner = await contract.owner();\n    if (signerAddress !== contractOwner) {\n      setError(\"You are not the owner of this contract.\");\n      setStatus(\"\");\n      return;\n    }\n\n    // Prepare candidates array\n    const candidateArray = candidates.split(\",\").map(name => name.trim());\n\n    // Create election transaction\n    setStatus(\"Waiting for confirmation...\");\n    const tx = await contract.createElection(title, candidateArray, startTimestamp, endTimestamp);\n    setStatus(\"Transaction submitted. Waiting for confirmation...\");\n    await tx.wait();\n    setStatus(`Election \"${title}\" created successfully!`);\n    setTitle(\"\");\n    setCandidates(\"\");\n    setStartTime(\"\");\n    setEndTime(\"\");\n  } catch (err) {\n    console.error(\"Error creating election:\", err);\n    setError(err.reason || \"Failed to create election. Ensure you're the contract owner and try again.\");\n    setStatus(\"\");\n  }\n};","map":{"version":3,"names":["handleCreateElection","setStatus","setError","title","candidates","startTime","endTime","startTimestamp","Date","getTime","endTimestamp","provider","ethers","providers","Web3Provider","window","ethereum","send","signer","getSigner","signerAddress","getAddress","contract","Contract","VotingAddress","VotingAbi","contractOwner","owner","candidateArray","split","map","name","trim","tx","createElection","wait","setTitle","setCandidates","setStartTime","setEndTime","err","console","error","reason"],"sources":["C:/votingdapp/src/components/CreateElection.jsx"],"sourcesContent":["const handleCreateElection = async () => {\r\n    try {\r\n        setStatus(\"Creating election...\");\r\n        setError(null);\r\n\r\n        // Validate inputs\r\n        if (!title || !candidates || !startTime || !endTime) {\r\n            setError(\"Please fill in all fields.\");\r\n            setStatus(\"\");\r\n            return;\r\n        }\r\n\r\n        // Convert times to UNIX timestamps (in UTC)\r\n        const startTimestamp = new Date(startTime).getTime() / 1000;  // Convert to seconds\r\n        const endTimestamp = new Date(endTime).getTime() / 1000;  // Convert to seconds\r\n\r\n        if (startTimestamp >= endTimestamp) {\r\n            setError(\"Start time must be before end time.\");\r\n            setStatus(\"\");\r\n            return;\r\n        }\r\n\r\n        // Initialize provider and signer (MetaMask)\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        await provider.send(\"eth_requestAccounts\", []); \r\n        const signer = provider.getSigner();\r\n        const signerAddress = await signer.getAddress();  // Get signer address\r\n        \r\n        const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n\r\n        // Check if signer is the contract owner\r\n        const contractOwner = await contract.owner();\r\n        if (signerAddress !== contractOwner) {\r\n            setError(\"You are not the owner of this contract.\");\r\n            setStatus(\"\");\r\n            return;\r\n        }\r\n\r\n        // Prepare candidates array\r\n        const candidateArray = candidates.split(\",\").map((name) => name.trim());\r\n\r\n        // Create election transaction\r\n        setStatus(\"Waiting for confirmation...\");\r\n        const tx = await contract.createElection(title, candidateArray, startTimestamp, endTimestamp);\r\n        setStatus(\"Transaction submitted. Waiting for confirmation...\");\r\n        await tx.wait();\r\n\r\n        setStatus(`Election \"${title}\" created successfully!`);\r\n        setTitle(\"\");\r\n        setCandidates(\"\");\r\n        setStartTime(\"\");\r\n        setEndTime(\"\");\r\n    } catch (err) {\r\n        console.error(\"Error creating election:\", err);\r\n        setError(\r\n            err.reason ||\r\n            \"Failed to create election. Ensure you're the contract owner and try again.\"\r\n        );\r\n        setStatus(\"\");\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACAC,SAAS,CAAC,sBAAsB,CAAC;IACjCC,QAAQ,CAAC,IAAI,CAAC;;IAEd;IACA,IAAI,CAACC,KAAK,IAAI,CAACC,UAAU,IAAI,CAACC,SAAS,IAAI,CAACC,OAAO,EAAE;MACjDJ,QAAQ,CAAC,4BAA4B,CAAC;MACtCD,SAAS,CAAC,EAAE,CAAC;MACb;IACJ;;IAEA;IACA,MAAMM,cAAc,GAAG,IAAIC,IAAI,CAACH,SAAS,CAAC,CAACI,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CAAE;IAC9D,MAAMC,YAAY,GAAG,IAAIF,IAAI,CAACF,OAAO,CAAC,CAACG,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CAAE;;IAE1D,IAAIF,cAAc,IAAIG,YAAY,EAAE;MAChCR,QAAQ,CAAC,qCAAqC,CAAC;MAC/CD,SAAS,CAAC,EAAE,CAAC;MACb;IACJ;;IAEA;IACA,MAAMU,QAAQ,GAAG,IAAIC,MAAM,CAACC,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;IACnE,MAAML,QAAQ,CAACM,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;IAC9C,MAAMC,MAAM,GAAGP,QAAQ,CAACQ,SAAS,CAAC,CAAC;IACnC,MAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC,CAAC,CAAE;;IAElD,MAAMC,QAAQ,GAAG,IAAIV,MAAM,CAACW,QAAQ,CAACC,aAAa,EAAEC,SAAS,EAAEP,MAAM,CAAC;;IAEtE;IACA,MAAMQ,aAAa,GAAG,MAAMJ,QAAQ,CAACK,KAAK,CAAC,CAAC;IAC5C,IAAIP,aAAa,KAAKM,aAAa,EAAE;MACjCxB,QAAQ,CAAC,yCAAyC,CAAC;MACnDD,SAAS,CAAC,EAAE,CAAC;MACb;IACJ;;IAEA;IACA,MAAM2B,cAAc,GAAGxB,UAAU,CAACyB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;;IAEvE;IACA/B,SAAS,CAAC,6BAA6B,CAAC;IACxC,MAAMgC,EAAE,GAAG,MAAMX,QAAQ,CAACY,cAAc,CAAC/B,KAAK,EAAEyB,cAAc,EAAErB,cAAc,EAAEG,YAAY,CAAC;IAC7FT,SAAS,CAAC,oDAAoD,CAAC;IAC/D,MAAMgC,EAAE,CAACE,IAAI,CAAC,CAAC;IAEflC,SAAS,CAAC,aAAaE,KAAK,yBAAyB,CAAC;IACtDiC,QAAQ,CAAC,EAAE,CAAC;IACZC,aAAa,CAAC,EAAE,CAAC;IACjBC,YAAY,CAAC,EAAE,CAAC;IAChBC,UAAU,CAAC,EAAE,CAAC;EAClB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;IAC9CtC,QAAQ,CACJsC,GAAG,CAACG,MAAM,IACV,4EACJ,CAAC;IACD1C,SAAS,CAAC,EAAE,CAAC;EACjB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
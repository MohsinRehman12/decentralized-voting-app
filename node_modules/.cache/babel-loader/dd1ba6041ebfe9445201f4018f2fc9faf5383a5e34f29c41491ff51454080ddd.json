{"ast":null,"code":"var _jsxFileName = \"C:\\\\votingdapp\\\\src\\\\pages\\\\VotingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\nimport { Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VotingPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [candidates, setCandidates] = useState([]);\n  const [error, setError] = useState(null);\n  const [canVote, setCanVote] = useState(true);\n\n  // Initialize provider and signer\n  const initializeProvider = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n    return {\n      provider,\n      signer,\n      contract\n    };\n  };\n  const checkVoterStatus = async () => {\n    try {\n      const {\n        signer,\n        contract\n      } = await initializeProvider();\n      const voterAddress = await signer.getAddress();\n\n      // Check if the voter has already voted in the election\n      const hasVoted = await contract.voters(voterAddress);\n      setCanVote(!hasVoted); // Set to false if voter has already voted\n    } catch (err) {\n      console.error(\"Error checking voter status:\", err);\n    }\n  };\n  const fetchCandidates = async () => {\n    try {\n      const {\n        contract\n      } = await initializeProvider();\n      const fetchedCandidates = await contract.getCandidates(id);\n      const formattedCandidates = fetchedCandidates.map(candidate => ({\n        name: candidate.name,\n        voteCount: candidate.voteCount.toString()\n      }));\n      setCandidates(formattedCandidates);\n    } catch (err) {\n      console.error(\"Error fetching candidates:\", err);\n      setError(\"Failed to load candidates.\");\n    }\n  };\n  const checkCanVote = async () => {\n    try {\n      const {\n        signer,\n        contract\n      } = await initializeProvider();\n      const voterAddress = await signer.getAddress();\n      const voteStatus = await contract.voters(voterAddress);\n      setCanVote(!voteStatus);\n    } catch (err) {\n      console.error(\"Error checking vote status:\", err);\n    }\n  };\n  const vote = async candidateIndex => {\n    try {\n      setError(null); // Clear any previous errors\n      const {\n        contract\n      } = await initializeProvider();\n\n      // Debug election timing before voting\n      const election = await contract.getElection(id);\n      const currentTime = Math.floor(Date.now() / 1000);\n      console.log(\"Current Time:\", currentTime);\n      console.log(\"Election Start Time:\", election.startTime);\n      console.log(\"Election End Time:\", election.endTime);\n\n      // Attempt to vote\n      const tx = await contract.vote(id, candidateIndex); // Ensure this matches the contract signature\n      await tx.wait();\n      console.log(`Successfully voted for candidate index ${candidateIndex}.`);\n\n      // Refresh data\n      fetchCandidates();\n      checkCanVote();\n    } catch (err) {\n      console.error(\"Error during voting:\", err);\n      if (err.reason) {\n        setError(err.reason); // Display error reason from the contract\n      } else {\n        setError(\"Failed to submit your vote.\");\n      }\n    }\n  };\n  useEffect(() => {\n    fetchCandidates();\n    checkCanVote();\n    checkVoterStatus();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Election \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 23\n    }, this), canVote ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [candidate.name, \": \", candidate.voteCount, \" votes\", /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => vote(index),\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You have already voted.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n_s(VotingPage, \"WL+bSZgvqn+VpyU93KdaweS3mEc=\", false, function () {\n  return [useParams];\n});\n_c = VotingPage;\nexport default VotingPage;\nvar _c;\n$RefreshReg$(_c, \"VotingPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","ethers","VotingAddress","VotingAbi","Button","jsxDEV","_jsxDEV","VotingPage","_s","id","candidates","setCandidates","error","setError","canVote","setCanVote","initializeProvider","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract","Contract","checkVoterStatus","voterAddress","getAddress","hasVoted","voters","err","console","fetchCandidates","fetchedCandidates","getCandidates","formattedCandidates","map","candidate","name","voteCount","toString","checkCanVote","voteStatus","vote","candidateIndex","election","getElection","currentTime","Math","floor","Date","now","log","startTime","endTime","tx","wait","reason","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","index","variant","onClick","marginLeft","_c","$RefreshReg$"],"sources":["C:/votingdapp/src/pages/VotingPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ethers } from \"ethers\";\r\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nfunction VotingPage() {\r\n    const { id } = useParams();\r\n    const [candidates, setCandidates] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [canVote, setCanVote] = useState(true);\r\n\r\n    // Initialize provider and signer\r\n    const initializeProvider = async () => {\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        await provider.send(\"eth_requestAccounts\", []);\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n\r\n        return { provider, signer, contract };\r\n    };\r\n\r\n    const checkVoterStatus = async () => {\r\n        try {\r\n            const { signer, contract } = await initializeProvider();\r\n            const voterAddress = await signer.getAddress();\r\n    \r\n            // Check if the voter has already voted in the election\r\n            const hasVoted = await contract.voters(voterAddress);\r\n            setCanVote(!hasVoted); // Set to false if voter has already voted\r\n        } catch (err) {\r\n            console.error(\"Error checking voter status:\", err);\r\n        }\r\n    };\r\n    \r\n    \r\n\r\n    const fetchCandidates = async () => {\r\n        try {\r\n            const { contract } = await initializeProvider();\r\n            const fetchedCandidates = await contract.getCandidates(id);\r\n\r\n            const formattedCandidates = fetchedCandidates.map((candidate) => ({\r\n                name: candidate.name,\r\n                voteCount: candidate.voteCount.toString(),\r\n            }));\r\n\r\n            setCandidates(formattedCandidates);\r\n        } catch (err) {\r\n            console.error(\"Error fetching candidates:\", err);\r\n            setError(\"Failed to load candidates.\");\r\n        }\r\n    };\r\n\r\n    const checkCanVote = async () => {\r\n        try {\r\n            const { signer, contract } = await initializeProvider();\r\n            const voterAddress = await signer.getAddress();\r\n            const voteStatus = await contract.voters(voterAddress);\r\n\r\n            setCanVote(!voteStatus);\r\n        } catch (err) {\r\n            console.error(\"Error checking vote status:\", err);\r\n        }\r\n    };\r\n\r\n    const vote = async (candidateIndex) => {\r\n        try {\r\n            setError(null); // Clear any previous errors\r\n            const { contract } = await initializeProvider();\r\n    \r\n            // Debug election timing before voting\r\n            const election = await contract.getElection(id);\r\n            const currentTime = Math.floor(Date.now() / 1000);\r\n            console.log(\"Current Time:\", currentTime);\r\n            console.log(\"Election Start Time:\", election.startTime);\r\n            console.log(\"Election End Time:\", election.endTime);\r\n    \r\n            // Attempt to vote\r\n            const tx = await contract.vote(id, candidateIndex); // Ensure this matches the contract signature\r\n            await tx.wait();\r\n    \r\n            console.log(`Successfully voted for candidate index ${candidateIndex}.`);\r\n    \r\n            // Refresh data\r\n            fetchCandidates();\r\n            checkCanVote();\r\n        } catch (err) {\r\n            console.error(\"Error during voting:\", err);\r\n            if (err.reason) {\r\n                setError(err.reason); // Display error reason from the contract\r\n            } else {\r\n                setError(\"Failed to submit your vote.\");\r\n            }\r\n        }\r\n    };\r\n    \r\n    useEffect(() => {\r\n        fetchCandidates();\r\n        checkCanVote();\r\n        checkVoterStatus();\r\n    }, [id]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Election {id}</h1>\r\n            {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n            {canVote ? (\r\n                <ul>\r\n                    {candidates.map((candidate, index) => (\r\n                        <li key={index}>\r\n                            {candidate.name}: {candidate.voteCount} votes\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => vote(index)}\r\n                                style={{ marginLeft: \"10px\" }}\r\n                            >\r\n                                Vote\r\n                            </Button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>You have already voted.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
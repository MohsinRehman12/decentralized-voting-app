{"ast":null,"code":"var _jsxFileName = \"C:\\\\votingdapp\\\\src\\\\pages\\\\VotingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\nimport { Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VotingPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [candidates, setCandidates] = useState([]);\n  const [error, setError] = useState(null);\n  const [canVote, setCanVote] = useState(false);\n  const [electionStatus, setElectionStatus] = useState(\"\");\n  const [signerAddress, setSignerAddress] = useState(\"\");\n\n  // Use Web3Provider to connect with MetaMask\n  const initializeProvider = async () => {\n    try {\n      console.log(\"Initializing provider...\");\n      const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n      await provider.send(\"eth_requestAccounts\", []); // Request accounts permission\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n      const currentSignerAddress = await signer.getAddress();\n      setSignerAddress(currentSignerAddress);\n      console.log(\"Using account:\", currentSignerAddress);\n\n      // Listen for account changes and update signerAddress accordingly\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        const newSignerAddress = accounts[0];\n        setSignerAddress(newSignerAddress);\n        console.log(\"Switched to account:\", newSignerAddress);\n      });\n      return {\n        provider,\n        signer,\n        contract\n      };\n    } catch (err) {\n      setError(\"Failed to initialize provider.\");\n      console.error(\"Error initializing provider:\", err);\n    }\n  };\n\n  // Fetch election details\n  const fetchElectionDetails = async () => {\n    try {\n      const {\n        contract\n      } = await initializeProvider();\n      const election = await contract.getElection(id);\n      const fetchedCandidates = await contract.getCandidates(id);\n      const formattedCandidates = fetchedCandidates.map(candidate => ({\n        name: candidate.name,\n        voteCount: candidate.voteCount.toString()\n      }));\n      setCandidates(formattedCandidates);\n      const currentTime = Math.floor(Date.now() / 1000); // Get current time in seconds\n      console.log(\"Current time (UNIX timestamp):\", currentTime);\n      console.log(\"Election start time (UNIX timestamp):\", election.startTime.toString());\n      console.log(\"Election end time (UNIX timestamp):\", election.endTime.toString());\n\n      // Ensure that times are correctly handled as seconds\n      if (currentTime < election.startTime.toNumber()) {\n        setElectionStatus(\"Election has not started yet.\");\n        setCanVote(false);\n      } else if (currentTime > election.endTime.toNumber()) {\n        setElectionStatus(\"Election has ended.\");\n        setCanVote(false);\n      } else {\n        setElectionStatus(\"Election is ongoing.\");\n        setCanVote(true);\n      }\n    } catch (err) {\n      console.error(\"Error fetching election details:\", err);\n      setError(\"Failed to load election details.\");\n    }\n  };\n\n  // Voting function\n  const vote = async candidateIndex => {\n    try {\n      const {\n        contract\n      } = await initializeProvider();\n      const hasVoted = await contract.hasVoted(id, signerAddress);\n      console.log(\"Has the current account voted?\", hasVoted);\n      if (hasVoted) {\n        setError(\"You have already voted in this election.\");\n        setCanVote(false);\n        return;\n      }\n      if (candidateIndex < 0 || candidateIndex >= candidates.length) {\n        setError(\"Invalid candidate index.\");\n        return;\n      }\n      const election = await contract.getElection(id);\n      const currentTime = Math.floor(Date.now() / 1000); // Get current time in seconds\n      console.log(\"Current time (UNIX timestamp):\", currentTime);\n      console.log(\"Election start time (UNIX timestamp):\", election.startTime.toNumber());\n      console.log(\"Election end time (UNIX timestamp):\", election.endTime.toNumber());\n\n      // Ensure the election start time and current time are compared correctly\n      if (currentTime < election.startTime.toNumber() || currentTime > election.endTime.toNumber()) {\n        setError(\"Election is not in valid voting period.\");\n        return;\n      }\n\n      // Send the transaction and get the transaction hash\n      const tx = await contract.vote(id, candidateIndex, {\n        gasLimit: 3000000 // Fallback gas limit (MetaMask will handle this)\n      });\n\n      // Wait for transaction to be mined\n      const receipt = await tx.wait();\n      console.log(\"Transaction Hash:\", receipt.transactionHash);\n      setError(\"Successfully voted!\");\n      fetchElectionDetails(); // Refresh election details after voting\n    } catch (err) {\n      console.error(\"Error during voting:\", err);\n      setError(\"An unexpected error occurred. Please try again.\");\n    }\n  };\n  async function handleVote() {\n    const provider = new ethers.pr();\n  }\n\n  // Fetch election details when the component mounts or election id changes\n  useEffect(() => {\n    fetchElectionDetails();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Election \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: electionStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), canVote ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [candidate.name, \": \", candidate.voteCount, \" votes\", /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => vote(index),\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You cannot vote in this election.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n_s(VotingPage, \"V4CGXxTExa5p1D5DpOd+laYyiaw=\", false, function () {\n  return [useParams];\n});\n_c = VotingPage;\nexport default VotingPage;\nvar _c;\n$RefreshReg$(_c, \"VotingPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","ethers","VotingAddress","VotingAbi","Button","jsxDEV","_jsxDEV","VotingPage","_s","id","candidates","setCandidates","error","setError","canVote","setCanVote","electionStatus","setElectionStatus","signerAddress","setSignerAddress","initializeProvider","console","log","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract","Contract","currentSignerAddress","getAddress","on","accounts","newSignerAddress","err","fetchElectionDetails","election","getElection","fetchedCandidates","getCandidates","formattedCandidates","map","candidate","name","voteCount","toString","currentTime","Math","floor","Date","now","startTime","endTime","toNumber","vote","candidateIndex","hasVoted","length","tx","gasLimit","receipt","wait","transactionHash","handleVote","pr","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","index","variant","onClick","marginLeft","_c","$RefreshReg$"],"sources":["C:/votingdapp/src/pages/VotingPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ethers } from \"ethers\";\r\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nfunction VotingPage() {\r\n    const { id } = useParams();\r\n    const [candidates, setCandidates] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [canVote, setCanVote] = useState(false);\r\n    const [electionStatus, setElectionStatus] = useState(\"\");\r\n    const [signerAddress, setSignerAddress] = useState(\"\");\r\n\r\n    // Use Web3Provider to connect with MetaMask\r\n    const initializeProvider = async () => {\r\n        try {\r\n            console.log(\"Initializing provider...\");\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n            await provider.send(\"eth_requestAccounts\", []); // Request accounts permission\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n\r\n            const currentSignerAddress = await signer.getAddress();\r\n            setSignerAddress(currentSignerAddress);\r\n            console.log(\"Using account:\", currentSignerAddress);\r\n\r\n            // Listen for account changes and update signerAddress accordingly\r\n            window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n                const newSignerAddress = accounts[0];\r\n                setSignerAddress(newSignerAddress);\r\n                console.log(\"Switched to account:\", newSignerAddress);\r\n            });\r\n\r\n            return { provider, signer, contract };\r\n        } catch (err) {\r\n            setError(\"Failed to initialize provider.\");\r\n            console.error(\"Error initializing provider:\", err);\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    // Fetch election details\r\n    const fetchElectionDetails = async () => {\r\n        try {\r\n            const { contract } = await initializeProvider();\r\n            const election = await contract.getElection(id);\r\n            const fetchedCandidates = await contract.getCandidates(id);\r\n\r\n            const formattedCandidates = fetchedCandidates.map((candidate) => ({\r\n                name: candidate.name,\r\n                voteCount: candidate.voteCount.toString(),\r\n            }));\r\n\r\n            setCandidates(formattedCandidates);\r\n\r\n            const currentTime = Math.floor(Date.now() / 1000); // Get current time in seconds\r\n            console.log(\"Current time (UNIX timestamp):\", currentTime);\r\n            console.log(\"Election start time (UNIX timestamp):\", election.startTime.toString());\r\n            console.log(\"Election end time (UNIX timestamp):\", election.endTime.toString());\r\n\r\n            // Ensure that times are correctly handled as seconds\r\n            if (currentTime < election.startTime.toNumber()) {\r\n                setElectionStatus(\"Election has not started yet.\");\r\n                setCanVote(false);\r\n            } else if (currentTime > election.endTime.toNumber()) {\r\n                setElectionStatus(\"Election has ended.\");\r\n                setCanVote(false);\r\n            } else {\r\n                setElectionStatus(\"Election is ongoing.\");\r\n                setCanVote(true);\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error fetching election details:\", err);\r\n            setError(\"Failed to load election details.\");\r\n        }\r\n    };\r\n\r\n    // Voting function\r\n    const vote = async (candidateIndex) => {\r\n        try {\r\n            const { contract } = await initializeProvider();\r\n\r\n            const hasVoted = await contract.hasVoted(id, signerAddress);\r\n            console.log(\"Has the current account voted?\", hasVoted);\r\n            if (hasVoted) {\r\n                setError(\"You have already voted in this election.\");\r\n                setCanVote(false);\r\n                return;\r\n            }\r\n\r\n            if (candidateIndex < 0 || candidateIndex >= candidates.length) {\r\n                setError(\"Invalid candidate index.\");\r\n                return;\r\n            }\r\n\r\n            const election = await contract.getElection(id);\r\n            const currentTime = Math.floor(Date.now() / 1000); // Get current time in seconds\r\n            console.log(\"Current time (UNIX timestamp):\", currentTime);\r\n            console.log(\"Election start time (UNIX timestamp):\", election.startTime.toNumber());\r\n            console.log(\"Election end time (UNIX timestamp):\", election.endTime.toNumber());\r\n\r\n            // Ensure the election start time and current time are compared correctly\r\n            if (currentTime < election.startTime.toNumber() || currentTime > election.endTime.toNumber()) {\r\n                setError(\"Election is not in valid voting period.\");\r\n                return;\r\n            }\r\n\r\n            // Send the transaction and get the transaction hash\r\n            const tx = await contract.vote(id, candidateIndex, {\r\n                gasLimit: 3000000,  // Fallback gas limit (MetaMask will handle this)\r\n            });\r\n\r\n            // Wait for transaction to be mined\r\n            const receipt = await tx.wait();\r\n            console.log(\"Transaction Hash:\", receipt.transactionHash);\r\n            setError(\"Successfully voted!\");\r\n\r\n            fetchElectionDetails();  // Refresh election details after voting\r\n        } catch (err) {\r\n            console.error(\"Error during voting:\", err);\r\n            setError(\"An unexpected error occurred. Please try again.\");\r\n        }\r\n    };\r\n\r\n    async function handleVote() {\r\n        const provider = new ethers.pr\r\n    }\r\n\r\n    // Fetch election details when the component mounts or election id changes\r\n    useEffect(() => {\r\n        fetchElectionDetails();\r\n    }, [id]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Election {id}</h1>\r\n            {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n            <p>{electionStatus}</p>\r\n            {canVote ? (\r\n                <ul>\r\n                    {candidates.map((candidate, index) => (\r\n                        <li key={index}>\r\n                            {candidate.name}: {candidate.voteCount} votes\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => vote(index)}\r\n                                style={{ marginLeft: \"10px\" }}\r\n                            >\r\n                                Vote\r\n                            </Button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>You cannot vote in this election.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\votingdapp\\\\src\\\\pages\\\\VotingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\nimport { Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VotingPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [candidates, setCandidates] = useState([]);\n  const [error, setError] = useState(null);\n  const [canVote, setCanVote] = useState(false);\n  const [electionStatus, setElectionStatus] = useState(\"\");\n  const [signerAddress, setSignerAddress] = useState(\"\");\n  const [hasVoted, setHasVoted] = useState(false);\n\n  // Initialize Web3Provider for MetaMask account switching\n  const initializeMetaMaskProvider = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    await provider.send(\"eth_requestAccounts\", []); // Request accounts permission\n    const signer = provider.getSigner();\n    const currentSignerAddress = await signer.getAddress();\n    setSignerAddress(currentSignerAddress);\n    console.log(\"Using MetaMask account:\", currentSignerAddress);\n\n    // Listen for account changes in MetaMask\n    window.ethereum.on(\"accountsChanged\", accounts => {\n      const newSignerAddress = accounts[0];\n      setSignerAddress(newSignerAddress);\n      console.log(\"Switched to account:\", newSignerAddress);\n    });\n    return {\n      provider,\n      signer\n    };\n  };\n\n  // Initialize JsonRpcProvider for contract interaction\n  const initializeContractProvider = async () => {\n    const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\n      name: \"hardhat\",\n      chainId: 31337\n    });\n    const signer = await provider.getSigner(); // Get the signer from the provider\n    return {\n      provider,\n      signer\n    };\n  };\n\n  // Fetch election details\n  const fetchElectionDetails = async () => {\n    try {\n      const {\n        provider,\n        signer\n      } = await initializeMetaMaskProvider();\n      const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n\n      // Fetch election and candidates data\n      const election = await contract.getElection(id);\n      const fetchedCandidates = await contract.getCandidates(id);\n      const formattedCandidates = fetchedCandidates.map(candidate => ({\n        name: candidate.name,\n        voteCount: candidate.voteCount.toString()\n      }));\n      setCandidates(formattedCandidates);\n      const currentTime = Math.floor(Date.now() / 1000); // Get current time in seconds\n      if (currentTime < election.startTime.toNumber()) {\n        setElectionStatus(\"Election has not started yet.\");\n        setCanVote(false);\n      } else if (currentTime > election.endTime.toNumber()) {\n        setElectionStatus(\"Election has ended.\");\n        setCanVote(false);\n      } else {\n        setElectionStatus(\"Election is ongoing.\");\n        setCanVote(true);\n      }\n\n      // Check if the user has already voted\n      const hasUserVoted = await contract.hasVoted(id, signerAddress);\n      setHasVoted(hasUserVoted);\n      console.log(\"Has Voted:\", hasUserVoted);\n    } catch (err) {\n      console.error(\"Error fetching election details:\", err);\n      setError(\"Failed to load election details.\");\n    }\n  };\n  const checkNetworkWithEthereum = async () => {\n    const chainId = await window.ethereum.request({\n      method: 'eth_chainId'\n    });\n    console.log(\"Connected to chain ID:\", chainId);\n  };\n\n  // Voting function\n  const vote = async candidateIndex => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []); // Request account access from MetaMask\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n\n      // Check if the user has already voted\n      const hasVoted = await contract.hasVoted(id, signer.address);\n      if (hasVoted) {\n        setError(\"You have already voted.\");\n        return;\n      }\n\n      // Proceed with voting\n      const tx = await contract.vote(id, candidateIndex);\n      await tx.wait();\n      console.log(\"Vote successful\", tx);\n      setError(\"Successfully voted!\");\n      fetchElectionDetails(); // Refresh election details\n    } catch (err) {\n      console.error(\"Error during voting:\", err);\n      setError(\"An unexpected error occurred. Please try again.\");\n    }\n  };\n\n  // Fetch election details when the component mounts or election id changes\n  useEffect(() => {\n    fetchElectionDetails();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Election \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: electionStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), canVote ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [candidate.name, \": \", candidate.voteCount, \" votes\", /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => vote(i),\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: hasVoted ? \"You have already voted.\" : \"You cannot vote in this election.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: fetchElectionDetails,\n      style: {\n        marginTop: \"10px\"\n      },\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n_s(VotingPage, \"rm4+4hB/GnXFfC69AygQiCxj9Rk=\", false, function () {\n  return [useParams];\n});\n_c = VotingPage;\nexport default VotingPage;\nvar _c;\n$RefreshReg$(_c, \"VotingPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","ethers","VotingAddress","VotingAbi","Button","jsxDEV","_jsxDEV","VotingPage","_s","id","candidates","setCandidates","error","setError","canVote","setCanVote","electionStatus","setElectionStatus","signerAddress","setSignerAddress","hasVoted","setHasVoted","initializeMetaMaskProvider","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","currentSignerAddress","getAddress","console","log","on","accounts","newSignerAddress","initializeContractProvider","JsonRpcProvider","name","chainId","fetchElectionDetails","contract","Contract","election","getElection","fetchedCandidates","getCandidates","formattedCandidates","map","candidate","voteCount","toString","currentTime","Math","floor","Date","now","startTime","toNumber","endTime","hasUserVoted","err","checkNetworkWithEthereum","request","method","vote","candidateIndex","address","tx","wait","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","index","variant","onClick","i","marginLeft","marginTop","_c","$RefreshReg$"],"sources":["C:/votingdapp/src/pages/VotingPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ethers } from \"ethers\";\r\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nfunction VotingPage() {\r\n    const { id } = useParams();\r\n    const [candidates, setCandidates] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [canVote, setCanVote] = useState(false);\r\n    const [electionStatus, setElectionStatus] = useState(\"\");\r\n    const [signerAddress, setSignerAddress] = useState(\"\");\r\n    const [hasVoted, setHasVoted] = useState(false);\r\n\r\n    // Initialize Web3Provider for MetaMask account switching\r\n    const initializeMetaMaskProvider = async () => {\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n        await provider.send(\"eth_requestAccounts\", []); // Request accounts permission\r\n        const signer = provider.getSigner();\r\n        const currentSignerAddress = await signer.getAddress();\r\n        setSignerAddress(currentSignerAddress);\r\n        console.log(\"Using MetaMask account:\", currentSignerAddress);\r\n\r\n        // Listen for account changes in MetaMask\r\n        window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n            const newSignerAddress = accounts[0];\r\n            setSignerAddress(newSignerAddress);\r\n            console.log(\"Switched to account:\", newSignerAddress);\r\n        });\r\n\r\n        return { provider, signer };\r\n    };\r\n\r\n    // Initialize JsonRpcProvider for contract interaction\r\n    const initializeContractProvider = async () => {\r\n        const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\r\n            name: \"hardhat\",\r\n            chainId: 31337,\r\n        });\r\n        const signer = await provider.getSigner(); // Get the signer from the provider\r\n        return { provider, signer };\r\n    };\r\n\r\n    // Fetch election details\r\n    const fetchElectionDetails = async () => {\r\n        try {\r\n            const { provider, signer } = await initializeMetaMaskProvider();\r\n            const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n    \r\n            // Fetch election and candidates data\r\n            const election = await contract.getElection(id);\r\n            const fetchedCandidates = await contract.getCandidates(id);\r\n    \r\n            const formattedCandidates = fetchedCandidates.map((candidate) => ({\r\n                name: candidate.name,\r\n                voteCount: candidate.voteCount.toString(),\r\n            }));\r\n    \r\n            setCandidates(formattedCandidates);\r\n    \r\n            const currentTime = Math.floor(Date.now() / 1000); // Get current time in seconds\r\n            if (currentTime < election.startTime.toNumber()) {\r\n                setElectionStatus(\"Election has not started yet.\");\r\n                setCanVote(false);\r\n            } else if (currentTime > election.endTime.toNumber()) {\r\n                setElectionStatus(\"Election has ended.\");\r\n                setCanVote(false);\r\n            } else {\r\n                setElectionStatus(\"Election is ongoing.\");\r\n                setCanVote(true);\r\n            }\r\n    \r\n            // Check if the user has already voted\r\n            const hasUserVoted = await contract.hasVoted(id, signerAddress);\r\n            setHasVoted(hasUserVoted);\r\n            console.log(\"Has Voted:\", hasUserVoted);\r\n        } catch (err) {\r\n            console.error(\"Error fetching election details:\", err);\r\n            setError(\"Failed to load election details.\");\r\n        }\r\n    };\r\n    \r\n    const checkNetworkWithEthereum = async () => {\r\n        const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n        console.log(\"Connected to chain ID:\", chainId);\r\n    };\r\n\r\n    // Voting function\r\n    const vote = async (candidateIndex) => {\r\n        try {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            await provider.send(\"eth_requestAccounts\", []);  // Request account access from MetaMask\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n    \r\n            // Check if the user has already voted\r\n            const hasVoted = await contract.hasVoted(id, signer.address);\r\n            if (hasVoted) {\r\n                setError(\"You have already voted.\");\r\n                return;\r\n            }\r\n    \r\n            // Proceed with voting\r\n            const tx = await contract.vote(id, candidateIndex);\r\n            await tx.wait();\r\n            console.log(\"Vote successful\", tx);\r\n            setError(\"Successfully voted!\");\r\n            fetchElectionDetails();  // Refresh election details\r\n        } catch (err) {\r\n            console.error(\"Error during voting:\", err);\r\n            setError(\"An unexpected error occurred. Please try again.\");\r\n        }\r\n    };\r\n    \r\n    \r\n\r\n    // Fetch election details when the component mounts or election id changes\r\n    useEffect(() => {\r\n        fetchElectionDetails();\r\n    }, [id]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Election {id}</h1>\r\n            {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n            <p>{electionStatus}</p>\r\n            {canVote ? (\r\n                <ul>\r\n                    {candidates.map((candidate, index) => (\r\n                        <li key={index}>\r\n                            {candidate.name}: {candidate.voteCount} votes\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => vote(i)\r\n                                }\r\n                                style={{ marginLeft: \"10px\" }}\r\n                            >\r\n                                Vote\r\n                            </Button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>{hasVoted ? \"You have already voted.\" : \"You cannot vote in this election.\"}</p>\r\n            )}\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={fetchElectionDetails}\r\n                style={{ marginTop: \"10px\" }}\r\n            >\r\n                Refresh\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
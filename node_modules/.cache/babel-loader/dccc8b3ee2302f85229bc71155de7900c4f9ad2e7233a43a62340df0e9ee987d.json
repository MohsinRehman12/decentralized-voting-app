{"ast":null,"code":"var _jsxFileName = \"C:\\\\votingdapp\\\\src\\\\pages\\\\VotingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\nimport { Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VotingPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [candidates, setCandidates] = useState([]);\n  const [error, setError] = useState(null);\n  const [winner, setWinner] = useState(null);\n  const [isElectionOver, setIsElectionOver] = useState(false);\n  const fetchElectionData = async () => {\n    try {\n      const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\n        name: \"hardhat\",\n        chainId: 31337\n      });\n      const contract = new ethers.Contract(VotingAddress, VotingAbi, provider);\n\n      // Fetch candidates\n      const fetchedCandidates = await contract.getCandidates(id);\n      const formattedCandidates = fetchedCandidates.map(candidate => ({\n        name: candidate.name,\n        voteCount: candidate.voteCount.toString()\n      }));\n      setCandidates(formattedCandidates);\n\n      // Fetch election status\n      const election = await contract.getElection(id);\n      const currentTime = Math.floor(Date.now() / 1000);\n      if (currentTime > election.endTime) {\n        setIsElectionOver(true);\n\n        // Fetch winner\n        const [winningCandidate, winningVotes] = await contract.getWinner(id);\n        setWinner({\n          name: winningCandidate,\n          votes: winningVotes.toString()\n        });\n      }\n    } catch (err) {\n      console.error(\"Error fetching election data:\", err);\n      setError(\"Failed to load election data.\");\n    }\n  };\n  const handleVote = async candidateIndex => {\n    try {\n      if (!window.ethereum) throw new Error(\"MetaMask is not installed.\");\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n      const tx = await contract.vote(id, candidateIndex);\n      await tx.wait();\n      fetchElectionData(); // Refresh election data after voting\n    } catch (err) {\n      console.error(\"Error voting:\", err);\n      setError(\"Failed to submit your vote.\");\n    }\n  };\n  useEffect(() => {\n    fetchElectionData();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Election \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 23\n    }, this), isElectionOver && winner ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Election Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Winner:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), \" \", winner.name, \" (\", winner.votes, \" votes)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [candidate.name, \": \", candidate.voteCount, \" votes\", /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => handleVote(index),\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(VotingPage, \"Eent2+s94arCBMi9HviE0hYeN7Y=\", false, function () {\n  return [useParams];\n});\n_c = VotingPage;\nexport default VotingPage;\nvar _c;\n$RefreshReg$(_c, \"VotingPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","ethers","VotingAddress","VotingAbi","Button","jsxDEV","_jsxDEV","VotingPage","_s","id","candidates","setCandidates","error","setError","winner","setWinner","isElectionOver","setIsElectionOver","fetchElectionData","provider","providers","JsonRpcProvider","name","chainId","contract","Contract","fetchedCandidates","getCandidates","formattedCandidates","map","candidate","voteCount","toString","election","getElection","currentTime","Math","floor","Date","now","endTime","winningCandidate","winningVotes","getWinner","votes","err","console","handleVote","candidateIndex","window","ethereum","Error","Web3Provider","signer","getSigner","tx","vote","wait","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","index","variant","onClick","marginLeft","_c","$RefreshReg$"],"sources":["C:/votingdapp/src/pages/VotingPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ethers } from \"ethers\";\r\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nfunction VotingPage() {\r\n    const { id } = useParams();\r\n    const [candidates, setCandidates] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [winner, setWinner] = useState(null);\r\n    const [isElectionOver, setIsElectionOver] = useState(false);\r\n\r\n    const fetchElectionData = async () => {\r\n        try {\r\n            const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\r\n                name: \"hardhat\",\r\n                chainId: 31337,\r\n            });\r\n\r\n            const contract = new ethers.Contract(VotingAddress, VotingAbi, provider);\r\n\r\n            // Fetch candidates\r\n            const fetchedCandidates = await contract.getCandidates(id);\r\n\r\n            const formattedCandidates = fetchedCandidates.map((candidate) => ({\r\n                name: candidate.name,\r\n                voteCount: candidate.voteCount.toString(),\r\n            }));\r\n\r\n            setCandidates(formattedCandidates);\r\n\r\n            // Fetch election status\r\n            const election = await contract.getElection(id);\r\n            const currentTime = Math.floor(Date.now() / 1000);\r\n\r\n            if (currentTime > election.endTime) {\r\n                setIsElectionOver(true);\r\n\r\n                // Fetch winner\r\n                const [winningCandidate, winningVotes] = await contract.getWinner(id);\r\n                setWinner({\r\n                    name: winningCandidate,\r\n                    votes: winningVotes.toString(),\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error fetching election data:\", err);\r\n            setError(\"Failed to load election data.\");\r\n        }\r\n    };\r\n\r\n    const handleVote = async (candidateIndex) => {\r\n        try {\r\n            if (!window.ethereum) throw new Error(\"MetaMask is not installed.\");\r\n\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n\r\n            const tx = await contract.vote(id, candidateIndex);\r\n            await tx.wait();\r\n            fetchElectionData(); // Refresh election data after voting\r\n        } catch (err) {\r\n            console.error(\"Error voting:\", err);\r\n            setError(\"Failed to submit your vote.\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchElectionData();\r\n    }, [id]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Election {id}</h1>\r\n            {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n            {isElectionOver && winner ? (\r\n                <div>\r\n                    <h2>Election Over</h2>\r\n                    <p>\r\n                        <strong>Winner:</strong> {winner.name} ({winner.votes} votes)\r\n                    </p>\r\n                </div>\r\n            ) : (\r\n                <ul>\r\n                    {candidates.map((candidate, index) => (\r\n                        <li key={index}>\r\n                            {candidate.name}: {candidate.voteCount} votes\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => handleVote(index)}\r\n                                style={{ marginLeft: \"10px\" }}\r\n                            >\r\n                                Vote\r\n                            </Button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
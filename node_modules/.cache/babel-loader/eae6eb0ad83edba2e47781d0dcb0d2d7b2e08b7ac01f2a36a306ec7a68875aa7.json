{"ast":null,"code":"var _jsxFileName = \"C:\\\\votingdapp\\\\src\\\\pages\\\\VotingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\nimport { Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VotingPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [candidates, setCandidates] = useState([]);\n  const [error, setError] = useState(null);\n  const [winner, setWinner] = useState(null);\n  const [isElectionOver, setIsElectionOver] = useState(false);\n  const [isMetaMaskConnected, setIsMetaMaskConnected] = useState(false);\n  const fetchElectionData = async () => {\n    try {\n      const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\n        name: \"hardhat\",\n        chainId: 31337\n      });\n      const contract = new ethers.Contract(VotingAddress, VotingAbi, provider);\n\n      // Fetch candidates\n      const fetchedCandidates = await contract.getCandidates(id);\n      const formattedCandidates = fetchedCandidates.map(candidate => ({\n        name: candidate.name,\n        voteCount: candidate.voteCount.toString()\n      }));\n      setCandidates(formattedCandidates);\n\n      // Fetch election status\n      const election = await contract.getElection(id);\n      const currentTime = Math.floor(Date.now() / 1000);\n      if (currentTime > election.endTime) {\n        setIsElectionOver(true);\n\n        // Fetch winner\n        const [winningCandidate, winningVotes] = await contract.getWinner(id);\n        setWinner({\n          name: winningCandidate,\n          votes: winningVotes.toString()\n        });\n      } else {\n        setIsElectionOver(false);\n      }\n    } catch (err) {\n      console.error(\"Error fetching election data:\", err);\n      setError(\"Failed to load election data.\");\n    }\n  };\n  const connectMetaMask = async () => {\n    try {\n      if (!window.ethereum) throw new Error(\"MetaMask is not installed.\");\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setIsMetaMaskConnected(true);\n    } catch (error) {\n      console.error(\"Error connecting to MetaMask:\", error);\n      setError(\"Failed to connect MetaMask.\");\n    }\n  };\n  const handleVote = async candidateIndex => {\n    try {\n      if (!isMetaMaskConnected) throw new Error(\"MetaMask is not connected. Please connect MetaMask first.\");\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n      const tx = await contract.vote(id, candidateIndex);\n      await tx.wait();\n      fetchElectionData(); // Refresh election data after voting\n    } catch (err) {\n      console.error(\"Error voting:\", err);\n      setError(\"Failed to submit your vote.\");\n    }\n  };\n  useEffect(() => {\n    fetchElectionData();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Election \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }, this), !isMetaMaskConnected && /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: connectMetaMask,\n      children: \"Connect MetaMask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this), isElectionOver && winner ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Election Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Winner:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), \" \", winner.name, \" (\", winner.votes, \" votes)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [candidate.name, \": \", candidate.voteCount, \" votes\", /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => handleVote(index),\n          disabled: !isMetaMaskConnected || isElectionOver,\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n_s(VotingPage, \"vM0adFwABIZisLm+0ktvXaK0Qwk=\", false, function () {\n  return [useParams];\n});\n_c = VotingPage;\nexport default VotingPage;\nvar _c;\n$RefreshReg$(_c, \"VotingPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","ethers","VotingAddress","VotingAbi","Button","jsxDEV","_jsxDEV","VotingPage","_s","id","candidates","setCandidates","error","setError","winner","setWinner","isElectionOver","setIsElectionOver","isMetaMaskConnected","setIsMetaMaskConnected","fetchElectionData","provider","providers","JsonRpcProvider","name","chainId","contract","Contract","fetchedCandidates","getCandidates","formattedCandidates","map","candidate","voteCount","toString","election","getElection","currentTime","Math","floor","Date","now","endTime","winningCandidate","winningVotes","getWinner","votes","err","console","connectMetaMask","window","ethereum","Error","request","method","handleVote","candidateIndex","Web3Provider","signer","getSigner","tx","vote","wait","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","variant","onClick","index","disabled","marginLeft","_c","$RefreshReg$"],"sources":["C:/votingdapp/src/pages/VotingPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ethers } from \"ethers\";\r\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nfunction VotingPage() {\r\n    const { id } = useParams();\r\n    const [candidates, setCandidates] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [winner, setWinner] = useState(null);\r\n    const [isElectionOver, setIsElectionOver] = useState(false);\r\n    const [isMetaMaskConnected, setIsMetaMaskConnected] = useState(false);\r\n\r\n    const fetchElectionData = async () => {\r\n        try {\r\n            const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\r\n                name: \"hardhat\",\r\n                chainId: 31337,\r\n            });\r\n\r\n            const contract = new ethers.Contract(VotingAddress, VotingAbi, provider);\r\n\r\n            // Fetch candidates\r\n            const fetchedCandidates = await contract.getCandidates(id);\r\n\r\n            const formattedCandidates = fetchedCandidates.map((candidate) => ({\r\n                name: candidate.name,\r\n                voteCount: candidate.voteCount.toString(),\r\n            }));\r\n\r\n            setCandidates(formattedCandidates);\r\n\r\n            // Fetch election status\r\n            const election = await contract.getElection(id);\r\n            const currentTime = Math.floor(Date.now() / 1000);\r\n\r\n            if (currentTime > election.endTime) {\r\n                setIsElectionOver(true);\r\n\r\n                // Fetch winner\r\n                const [winningCandidate, winningVotes] = await contract.getWinner(id);\r\n                setWinner({\r\n                    name: winningCandidate,\r\n                    votes: winningVotes.toString(),\r\n                });\r\n            } else {\r\n                setIsElectionOver(false);\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error fetching election data:\", err);\r\n            setError(\"Failed to load election data.\");\r\n        }\r\n    };\r\n\r\n    const connectMetaMask = async () => {\r\n        try {\r\n            if (!window.ethereum) throw new Error(\"MetaMask is not installed.\");\r\n            await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n            setIsMetaMaskConnected(true);\r\n        } catch (error) {\r\n            console.error(\"Error connecting to MetaMask:\", error);\r\n            setError(\"Failed to connect MetaMask.\");\r\n        }\r\n    };\r\n\r\n    const handleVote = async (candidateIndex) => {\r\n        try {\r\n            if (!isMetaMaskConnected) throw new Error(\"MetaMask is not connected. Please connect MetaMask first.\");\r\n\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n\r\n            const tx = await contract.vote(id, candidateIndex);\r\n            await tx.wait();\r\n            fetchElectionData(); // Refresh election data after voting\r\n        } catch (err) {\r\n            console.error(\"Error voting:\", err);\r\n            setError(\"Failed to submit your vote.\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchElectionData();\r\n    }, [id]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Election {id}</h1>\r\n            {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n            {!isMetaMaskConnected && (\r\n                <Button variant=\"contained\" color=\"primary\" onClick={connectMetaMask}>\r\n                    Connect MetaMask\r\n                </Button>\r\n            )}\r\n            {isElectionOver && winner ? (\r\n                <div>\r\n                    <h2>Election Over</h2>\r\n                    <p>\r\n                        <strong>Winner:</strong> {winner.name} ({winner.votes} votes)\r\n                    </p>\r\n                </div>\r\n            ) : (\r\n                <ul>\r\n                    {candidates.map((candidate, index) => (\r\n                        <li key={index}>\r\n                            {candidate.name}: {candidate.voteCount} votes\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => handleVote(index)}\r\n                                disabled={!isMetaMaskConnected || isElectionOver}\r\n                                style={{ marginLeft: \"10px\" }}\r\n                            >\r\n                                Vote\r\n                            </Button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,aAAa,EAAEC,SAAS,QAAQ,qBAAqB;AAC9D,SAASC,MAAM,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM;IAAEC;EAAG,CAAC,GAAGT,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACmB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAErE,MAAMqB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACA,MAAMC,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,SAAS,CAACC,eAAe,CAAC,uBAAuB,EAAE;QAC3EC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;MACb,CAAC,CAAC;MAEF,MAAMC,QAAQ,GAAG,IAAIzB,MAAM,CAAC0B,QAAQ,CAACzB,aAAa,EAAEC,SAAS,EAAEkB,QAAQ,CAAC;;MAExE;MACA,MAAMO,iBAAiB,GAAG,MAAMF,QAAQ,CAACG,aAAa,CAACpB,EAAE,CAAC;MAE1D,MAAMqB,mBAAmB,GAAGF,iBAAiB,CAACG,GAAG,CAAEC,SAAS,KAAM;QAC9DR,IAAI,EAAEQ,SAAS,CAACR,IAAI;QACpBS,SAAS,EAAED,SAAS,CAACC,SAAS,CAACC,QAAQ,CAAC;MAC5C,CAAC,CAAC,CAAC;MAEHvB,aAAa,CAACmB,mBAAmB,CAAC;;MAElC;MACA,MAAMK,QAAQ,GAAG,MAAMT,QAAQ,CAACU,WAAW,CAAC3B,EAAE,CAAC;MAC/C,MAAM4B,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;MAEjD,IAAIJ,WAAW,GAAGF,QAAQ,CAACO,OAAO,EAAE;QAChCzB,iBAAiB,CAAC,IAAI,CAAC;;QAEvB;QACA,MAAM,CAAC0B,gBAAgB,EAAEC,YAAY,CAAC,GAAG,MAAMlB,QAAQ,CAACmB,SAAS,CAACpC,EAAE,CAAC;QACrEM,SAAS,CAAC;UACNS,IAAI,EAAEmB,gBAAgB;UACtBG,KAAK,EAAEF,YAAY,CAACV,QAAQ,CAAC;QACjC,CAAC,CAAC;MACN,CAAC,MAAM;QACHjB,iBAAiB,CAAC,KAAK,CAAC;MAC5B;IACJ,CAAC,CAAC,OAAO8B,GAAG,EAAE;MACVC,OAAO,CAACpC,KAAK,CAAC,+BAA+B,EAAEmC,GAAG,CAAC;MACnDlC,QAAQ,CAAC,+BAA+B,CAAC;IAC7C;EACJ,CAAC;EAED,MAAMoC,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACA,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MACnE,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MAChEnC,sBAAsB,CAAC,IAAI,CAAC;IAChC,CAAC,CAAC,OAAOP,KAAK,EAAE;MACZoC,OAAO,CAACpC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDC,QAAQ,CAAC,6BAA6B,CAAC;IAC3C;EACJ,CAAC;EAED,MAAM0C,UAAU,GAAG,MAAOC,cAAc,IAAK;IACzC,IAAI;MACA,IAAI,CAACtC,mBAAmB,EAAE,MAAM,IAAIkC,KAAK,CAAC,2DAA2D,CAAC;MAEtG,MAAM/B,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,SAAS,CAACmC,YAAY,CAACP,MAAM,CAACC,QAAQ,CAAC;MACnE,MAAMO,MAAM,GAAGrC,QAAQ,CAACsC,SAAS,CAAC,CAAC;MACnC,MAAMjC,QAAQ,GAAG,IAAIzB,MAAM,CAAC0B,QAAQ,CAACzB,aAAa,EAAEC,SAAS,EAAEuD,MAAM,CAAC;MAEtE,MAAME,EAAE,GAAG,MAAMlC,QAAQ,CAACmC,IAAI,CAACpD,EAAE,EAAE+C,cAAc,CAAC;MAClD,MAAMI,EAAE,CAACE,IAAI,CAAC,CAAC;MACf1C,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,OAAO2B,GAAG,EAAE;MACVC,OAAO,CAACpC,KAAK,CAAC,eAAe,EAAEmC,GAAG,CAAC;MACnClC,QAAQ,CAAC,6BAA6B,CAAC;IAC3C;EACJ,CAAC;EAEDf,SAAS,CAAC,MAAM;IACZsB,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACX,EAAE,CAAC,CAAC;EAER,oBACIH,OAAA;IAAAyD,QAAA,gBACIzD,OAAA;MAAAyD,QAAA,GAAI,WAAS,EAACtD,EAAE;IAAA;MAAAuD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACrBvD,KAAK,iBAAIN,OAAA;MAAG8D,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAN,QAAA,EAAEnD;IAAK;MAAAoD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChD,CAACjD,mBAAmB,iBACjBZ,OAAA,CAACF,MAAM;MAACkE,OAAO,EAAC,WAAW;MAACD,KAAK,EAAC,SAAS;MAACE,OAAO,EAAEtB,eAAgB;MAAAc,QAAA,EAAC;IAEtE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACX,EACAnD,cAAc,IAAIF,MAAM,gBACrBR,OAAA;MAAAyD,QAAA,gBACIzD,OAAA;QAAAyD,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtB7D,OAAA;QAAAyD,QAAA,gBACIzD,OAAA;UAAAyD,QAAA,EAAQ;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACrD,MAAM,CAACU,IAAI,EAAC,IAAE,EAACV,MAAM,CAACgC,KAAK,EAAC,SAC1D;MAAA;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,gBAEN7D,OAAA;MAAAyD,QAAA,EACKrD,UAAU,CAACqB,GAAG,CAAC,CAACC,SAAS,EAAEwC,KAAK,kBAC7BlE,OAAA;QAAAyD,QAAA,GACK/B,SAAS,CAACR,IAAI,EAAC,IAAE,EAACQ,SAAS,CAACC,SAAS,EAAC,QACvC,eAAA3B,OAAA,CAACF,MAAM;UACHkE,OAAO,EAAC,WAAW;UACnBD,KAAK,EAAC,SAAS;UACfE,OAAO,EAAEA,CAAA,KAAMhB,UAAU,CAACiB,KAAK,CAAE;UACjCC,QAAQ,EAAE,CAACvD,mBAAmB,IAAIF,cAAe;UACjDoD,KAAK,EAAE;YAAEM,UAAU,EAAE;UAAO,CAAE;UAAAX,QAAA,EACjC;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAVJK,KAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACP;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAC3D,EAAA,CArHQD,UAAU;EAAA,QACAP,SAAS;AAAA;AAAA2E,EAAA,GADnBpE,UAAU;AAuHnB,eAAeA,UAAU;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\votingdapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingABI } from \"./context/constant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [candidates, setCandidates] = useState([]);\n  const [remainingTime, setRemainingTime] = useState(\"\");\n  const fetchENSData = async () => {\n    const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\n      name: \"hardhat\",\n      chainId: 31337\n    });\n    const network = await provider.getNetwork();\n    console.log(\"Connected network:\", network);\n    const ensAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\"; // ENS Registry\n    const ensABI = [\"function resolver(bytes32 node) external view returns (address)\"];\n    const namehash = ethers.utils.namehash(\"vitalik.eth\");\n    const ens = new ethers.Contract(ensAddress, ensABI, provider);\n    const resolverAddress = await ens.resolver(namehash);\n    console.log(\"Resolver address:\", resolverAddress);\n    const resolverABI = [\"function addr(bytes32 node) external view returns (address)\"];\n    const resolver = new ethers.Contract(resolverAddress, resolverABI, provider);\n    const address = await resolver.addr(namehash);\n  };\n  useEffect(() => {\n    const fetchCandidates = async () => {\n      try {\n        console.log(\"Starting fetchCandidates...\");\n\n        // Explicitly set the provider network to avoid ENS issues\n        const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\n          name: \"hardhat\",\n          chainId: 31337\n        });\n        console.log(\"Provider initialized:\", provider);\n\n        // Initialize signer\n        const signer = provider.getSigner();\n        const signerAddress = await signer.getAddress();\n        console.log(\"Signer address:\", signerAddress);\n\n        // Initialize contract\n        const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n        console.log(\"Contract instance:\", contract);\n\n        // Fetch candidates\n        const candidates = await contract.getAllVotesOfCandidates();\n        console.log(\"Fetched candidates (raw):\", candidates);\n        const remainingTime = await contract.getRemainingTime();\n        console.log(\"remainingTime:\", remainingTime);\n\n        // Format candidates\n        const formattedCandidates = candidates.map(candidate => ({\n          name: candidate.name,\n          voteCount: candidate.voteCount.toString()\n        }));\n        setCandidates(formattedCandidates);\n        console.log(\"Formatted candidates:\", formattedCandidates);\n      } catch (error) {\n        console.error(\"Error in fetchCandidates:\", error);\n        setError(error.message);\n      }\n    };\n    fetchCandidates();\n    fetchENSData();\n  }, []);\n  const fetchCandidates = async () => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(VotingAddress, VotingABI, signer);\n      const data = await contract.getAllCandidates();\n      const formatted = data.map(candidate => ({\n        name: candidate.name,\n        voteCount: candidate.voteCount.toString()\n      }));\n      setCandidates(formatted);\n    } catch (error) {\n      console.error(\"Error fetching candidates:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchCandidates();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Voting App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [candidate.name, \": \", candidate.voteCount, \" votes\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"W22tivjCuugqbwQBumBkdOn0a3Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","VotingAddress","VotingABI","jsxDEV","_jsxDEV","App","_s","candidates","setCandidates","remainingTime","setRemainingTime","fetchENSData","provider","providers","JsonRpcProvider","name","chainId","network","getNetwork","console","log","ensAddress","ensABI","namehash","utils","ens","Contract","resolverAddress","resolver","resolverABI","address","addr","fetchCandidates","signer","getSigner","signerAddress","getAddress","contract","VotingAbi","getAllVotesOfCandidates","getRemainingTime","formattedCandidates","map","candidate","voteCount","toString","error","setError","message","Web3Provider","window","ethereum","send","data","getAllCandidates","formatted","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["C:/votingdapp/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingABI } from \"./context/constant\";\n\nfunction App() {\n    const [candidates, setCandidates] = useState([]);\n    const [remainingTime, setRemainingTime] = useState(\"\");\n\n    const fetchENSData = async () => {\n        const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\n            name: \"hardhat\",\n            chainId: 31337,\n        });\n\n        const network = await provider.getNetwork();\n        console.log(\"Connected network:\", network);\n\n\n            \n        const ensAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\"; // ENS Registry\n        const ensABI = [\n            \"function resolver(bytes32 node) external view returns (address)\"\n        ];\n        const namehash = ethers.utils.namehash(\"vitalik.eth\");\n    \n        const ens = new ethers.Contract(ensAddress, ensABI, provider);\n        const resolverAddress = await ens.resolver(namehash);\n        console.log(\"Resolver address:\", resolverAddress);\n    \n        const resolverABI = [\n            \"function addr(bytes32 node) external view returns (address)\"\n        ];\n        const resolver = new ethers.Contract(resolverAddress, resolverABI, provider);\n        const address = await resolver.addr(namehash);\n    };\n    \n    useEffect(() => {\n        const fetchCandidates = async () => {\n            try {\n                console.log(\"Starting fetchCandidates...\");\n        \n                // Explicitly set the provider network to avoid ENS issues\n                const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\n                    name: \"hardhat\",\n                    chainId: 31337,\n                });\n                console.log(\"Provider initialized:\", provider);\n        \n                // Initialize signer\n                const signer = provider.getSigner();\n                const signerAddress = await signer.getAddress();\n                console.log(\"Signer address:\", signerAddress);\n        \n                // Initialize contract\n                const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n                console.log(\"Contract instance:\", contract);\n        \n                // Fetch candidates\n                const candidates = await contract.getAllVotesOfCandidates();\n                console.log(\"Fetched candidates (raw):\", candidates);\n\n                const remainingTime = await contract.getRemainingTime();\n                console.log(\"remainingTime:\", remainingTime);\n\n                // Format candidates\n                const formattedCandidates = candidates.map((candidate) => ({\n                    name: candidate.name,\n                    voteCount: candidate.voteCount.toString(),\n                }));\n        \n                setCandidates(formattedCandidates);\n                console.log(\"Formatted candidates:\", formattedCandidates);\n            } catch (error) {\n                console.error(\"Error in fetchCandidates:\", error);\n                setError(error.message);\n            }\n        };\n        \n        \n        \n\n        fetchCandidates();\n        fetchENSData();\n    }, []);\n\n    const fetchCandidates = async () => {\n        try {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            await provider.send(\"eth_requestAccounts\", []);\n            const signer = provider.getSigner();\n            const contract = new ethers.Contract(VotingAddress, VotingABI, signer);\n\n            const data = await contract.getAllCandidates();\n            const formatted = data.map(candidate => ({\n                name: candidate.name,\n                voteCount: candidate.voteCount.toString(),\n            }));\n\n            setCandidates(formatted);\n        } catch (error) {\n            console.error(\"Error fetching candidates:\", error);\n        }\n    };\n\n    useEffect(() => {\n        fetchCandidates();\n    }, []);\n\n    return (\n        <div>\n            <h1>Voting App</h1>\n            <ul>\n                {candidates.map((candidate, index) => (\n                    <li key={index}>\n                        {candidate.name}: {candidate.voteCount} votes\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
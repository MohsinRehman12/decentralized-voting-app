{"ast":null,"code":"var _jsxFileName = \"C:\\\\votingdapp\\\\src\\\\pages\\\\VotingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\nimport { Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VotingPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [candidates, setCandidates] = useState([]);\n  const [error, setError] = useState(null);\n  const [canVote, setCanVote] = useState(true);\n  const [electionStatus, setElectionStatus] = useState(\"\");\n  const [signerAddress, setSignerAddress] = useState(\"\");\n  const initializeProvider = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n    const signerAddress = await signer.getAddress();\n    setSignerAddress(signerAddress);\n    return {\n      provider,\n      signer,\n      contract\n    };\n  };\n  const fetchElectionDetails = async () => {\n    try {\n      const {\n        contract\n      } = await initializeProvider();\n      const election = await contract.getElection(id);\n      const fetchedCandidates = await contract.getCandidates(id);\n      const formattedCandidates = fetchedCandidates.map(candidate => ({\n        name: candidate.name,\n        voteCount: candidate.voteCount.toString()\n      }));\n      setCandidates(formattedCandidates);\n      const currentTime = Math.floor(Date.now() / 1000);\n      if (currentTime < election.startTime) {\n        setElectionStatus(\"Election has not started yet.\");\n        setCanVote(false);\n      } else if (currentTime > election.endTime) {\n        setElectionStatus(\"Election has ended.\");\n        setCanVote(false);\n      } else {\n        setElectionStatus(\"Election is ongoing.\");\n        setCanVote(true);\n      }\n    } catch (err) {\n      console.error(\"Error fetching election details:\", err);\n      setError(\"Failed to load election details.\");\n    }\n  };\n  const vote = async candidateIndex => {\n    try {\n      const {\n        contract\n      } = await initializeProvider();\n\n      // Check if the user has already voted\n      const hasVoted = await contract.hasVoted(id, signerAddress);\n      console.log(\"Has user voted?\", hasVoted);\n      if (hasVoted) {\n        console.log(\"User has already voted.\");\n        setError(\"You have already voted in this election.\");\n        setCanVote(false);\n        return;\n      }\n\n      // Check if candidate index is valid\n      if (candidateIndex < 0 || candidateIndex >= candidates.length) {\n        setError(\"Invalid candidate index.\");\n        return;\n      }\n\n      // Attempt gas estimation\n      let gasEstimate;\n      try {\n        gasEstimate = await contract.estimateGas.vote(id, candidateIndex);\n      } catch (gasErr) {\n        console.error(\"Gas estimation failed, using fallback gas limit\", gasErr);\n        gasEstimate = 1000000; // Fallback gas limit\n      }\n      const tx = await contract.vote(id, candidateIndex, {\n        gasLimit: gasEstimate\n      });\n      await tx.wait();\n      console.log(\"Successfully voted for candidate index:\", candidateIndex);\n      fetchElectionDetails(); // Refresh after voting\n    } catch (err) {\n      console.error(\"Error during voting:\", err);\n      if (err.code === -32603) {\n        if (err.data && err.data.message) {\n          console.error(\"Revert reason:\", err.data.message);\n        }\n        setError(\"Failed to submit your vote. See console for details.\");\n      }\n    }\n  };\n  useEffect(() => {\n    fetchElectionDetails();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Election \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: electionStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), canVote ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [candidate.name, \": \", candidate.voteCount, \" votes\", /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => vote(index),\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You cannot vote in this election.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n_s(VotingPage, \"bsov+zrSrFWUs7m6T60dIUrZpuY=\", false, function () {\n  return [useParams];\n});\n_c = VotingPage;\nexport default VotingPage;\nvar _c;\n$RefreshReg$(_c, \"VotingPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","ethers","VotingAddress","VotingAbi","Button","jsxDEV","_jsxDEV","VotingPage","_s","id","candidates","setCandidates","error","setError","canVote","setCanVote","electionStatus","setElectionStatus","signerAddress","setSignerAddress","initializeProvider","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract","Contract","getAddress","fetchElectionDetails","election","getElection","fetchedCandidates","getCandidates","formattedCandidates","map","candidate","name","voteCount","toString","currentTime","Math","floor","Date","now","startTime","endTime","err","console","vote","candidateIndex","hasVoted","log","length","gasEstimate","estimateGas","gasErr","tx","gasLimit","wait","code","data","message","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","index","variant","onClick","marginLeft","_c","$RefreshReg$"],"sources":["C:/votingdapp/src/pages/VotingPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ethers } from \"ethers\";\r\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nfunction VotingPage() {\r\n    const { id } = useParams();\r\n    const [candidates, setCandidates] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [canVote, setCanVote] = useState(true);\r\n    const [electionStatus, setElectionStatus] = useState(\"\");\r\n    const [signerAddress, setSignerAddress] = useState(\"\");\r\n\r\n    const initializeProvider = async () => {\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        await provider.send(\"eth_requestAccounts\", []);\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n\r\n        const signerAddress = await signer.getAddress();\r\n        setSignerAddress(signerAddress);\r\n\r\n        return { provider, signer, contract };\r\n    };\r\n\r\n    const fetchElectionDetails = async () => {\r\n        try {\r\n            const { contract } = await initializeProvider();\r\n            const election = await contract.getElection(id);\r\n            const fetchedCandidates = await contract.getCandidates(id);\r\n\r\n            const formattedCandidates = fetchedCandidates.map((candidate) => ({\r\n                name: candidate.name,\r\n                voteCount: candidate.voteCount.toString(),\r\n            }));\r\n\r\n            setCandidates(formattedCandidates);\r\n\r\n            const currentTime = Math.floor(Date.now() / 1000);\r\n            if (currentTime < election.startTime) {\r\n                setElectionStatus(\"Election has not started yet.\");\r\n                setCanVote(false);\r\n            } else if (currentTime > election.endTime) {\r\n                setElectionStatus(\"Election has ended.\");\r\n                setCanVote(false);\r\n            } else {\r\n                setElectionStatus(\"Election is ongoing.\");\r\n                setCanVote(true);\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error fetching election details:\", err);\r\n            setError(\"Failed to load election details.\");\r\n        }\r\n    };\r\n\r\n    const vote = async (candidateIndex) => {\r\n        try {\r\n\r\n            \r\n            const { contract } = await initializeProvider();\r\n\r\n            // Check if the user has already voted\r\n            const hasVoted = await contract.hasVoted(id, signerAddress);\r\n            console.log(\"Has user voted?\", hasVoted);\r\n            if (hasVoted) {\r\n                console.log(\"User has already voted.\");\r\n                setError(\"You have already voted in this election.\");\r\n                setCanVote(false);\r\n                return;\r\n            }\r\n\r\n            // Check if candidate index is valid\r\n            if (candidateIndex < 0 || candidateIndex >= candidates.length) {\r\n                setError(\"Invalid candidate index.\");\r\n                return;\r\n            }\r\n\r\n            // Attempt gas estimation\r\n            let gasEstimate;\r\n            try {\r\n                gasEstimate = await contract.estimateGas.vote(id, candidateIndex);\r\n            } catch (gasErr) {\r\n                console.error(\"Gas estimation failed, using fallback gas limit\", gasErr);\r\n                gasEstimate = 1000000;  // Fallback gas limit\r\n            }\r\n\r\n            const tx = await contract.vote(id, candidateIndex, { gasLimit: gasEstimate });\r\n            await tx.wait();\r\n            console.log(\"Successfully voted for candidate index:\", candidateIndex);\r\n            fetchElectionDetails();  // Refresh after voting\r\n        } catch (err) {\r\n            console.error(\"Error during voting:\", err);\r\n            if (err.code === -32603) {\r\n                if (err.data && err.data.message) {\r\n                    console.error(\"Revert reason:\", err.data.message);\r\n                }\r\n                setError(\"Failed to submit your vote. See console for details.\");\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchElectionDetails();\r\n    }, [id]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Election {id}</h1>\r\n            {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n            <p>{electionStatus}</p>\r\n            {canVote ? (\r\n                <ul>\r\n                    {candidates.map((candidate, index) => (\r\n                        <li key={index}>\r\n                            {candidate.name}: {candidate.voteCount} votes\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => vote(index)}\r\n                                style={{ marginLeft: \"10px\" }}\r\n                            >\r\n                                Vote\r\n                            </Button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>You cannot vote in this election.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
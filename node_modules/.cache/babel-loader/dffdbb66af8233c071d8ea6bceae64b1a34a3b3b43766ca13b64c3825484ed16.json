{"ast":null,"code":"var _jsxFileName = \"C:\\\\votingdapp\\\\src\\\\pages\\\\VotingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\nimport { Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VotingPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [candidates, setCandidates] = useState([]);\n  const [error, setError] = useState(null);\n  const [canVote, setCanVote] = useState(false);\n  const [electionStatus, setElectionStatus] = useState(\"\");\n  const [signerAddress, setSignerAddress] = useState(\"\");\n\n  // Use Web3Provider to connect with MetaMask\n  const initializeProvider = async () => {\n    try {\n      console.log(\"Initializing provider...\");\n      const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n      await provider.send(\"eth_requestAccounts\", []); // Request accounts permission\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n      const currentSignerAddress = await signer.getAddress();\n      setSignerAddress(currentSignerAddress);\n      console.log(\"Using account:\", currentSignerAddress);\n\n      // Listen for account changes and update signerAddress accordingly\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        const newSignerAddress = accounts[0];\n        setSignerAddress(newSignerAddress);\n        console.log(\"Switched to account:\", newSignerAddress);\n      });\n      return {\n        provider,\n        signer,\n        contract\n      };\n    } catch (err) {\n      setError(\"Failed to initialize provider.\");\n      console.error(\"Error initializing provider:\", err);\n    }\n  };\n\n  // Fetch election details\n  const fetchElectionDetails = async () => {\n    try {\n      const {\n        contract\n      } = await initializeProvider();\n      const election = await contract.getElection(id);\n      const fetchedCandidates = await contract.getCandidates(id);\n      const formattedCandidates = fetchedCandidates.map(candidate => ({\n        name: candidate.name,\n        voteCount: candidate.voteCount.toString()\n      }));\n      setCandidates(formattedCandidates);\n      const currentTime = Math.floor(Date.now() / 1000); // Get current time in seconds\n      console.log(\"Current time (UNIX timestamp):\", currentTime);\n      console.log(\"Election start time (UNIX timestamp):\", election.startTime.toString());\n      console.log(\"Election end time (UNIX timestamp):\", election.endTime.toString());\n\n      // Ensure that times are correctly handled as seconds\n      if (currentTime < election.startTime.toNumber()) {\n        setElectionStatus(\"Election has not started yet.\");\n        setCanVote(false);\n      } else if (currentTime > election.endTime.toNumber()) {\n        setElectionStatus(\"Election has ended.\");\n        setCanVote(false);\n      } else {\n        setElectionStatus(\"Election is ongoing.\");\n        setCanVote(true);\n      }\n    } catch (err) {\n      console.error(\"Error fetching election details:\", err);\n      setError(\"Failed to load election details.\");\n    }\n  };\n\n  // Voting function\n  // const vote = async (candidateIndex) => {\n  //     try {\n  //         const { contract } = await initializeProvider();\n\n  //         // If the user has already voted, return\n  //         const hasVoted = await contract.hasVoted(id, signerAddress);\n  //         if (hasVoted) {\n  //             setError(\"You have already voted in this election.\");\n  //             return;\n  //         }\n\n  //         // Send the vote transaction\n  //         const tx = await contract.vote(id, candidateIndex, {\n  //             gasLimit: 3000000,  // Adjust gas if necessary\n  //         });\n\n  //         // Wait for the transaction to be mined\n  //         const receipt = await tx.wait();\n  //         console.log(\"Transaction Hash:\", receipt.transactionHash);\n\n  //         // Update UI state after voting\n  //         setError(\"Successfully voted!\");\n  //         fetchElectionDetails();  // Refresh the election details to show updated votes\n\n  //     } catch (err) {\n  //         console.error(\"Error during voting:\", err);\n  //         setError(\"An unexpected error occurred. Please try again.\");\n  //     }\n  // };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const {\n          contract\n        } = await initializeProvider();\n        const election = await contract.getElection(id);\n        const fetchedCandidates = await contract.getCandidates(id);\n\n        // ... (rest of the data processing and state updates)\n      } catch (err) {\n        console.error(\"Error fetching election details:\", err);\n        setError(\"Failed to load election details.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [id]);\n\n  // Voting function with improved error handling\n  const vote = async candidateIndex => {\n    try {\n      setIsLoading(true); // Set loading state to true\n      const {\n        contract\n      } = await initializeProvider();\n\n      // ... (rest of the voting logic)\n\n      setError(\"Successfully voted!\");\n      setIsLoading(false); // Set loading state to false\n    } catch (err) {\n      console.error(\"Error during voting:\", err);\n      setError(\"An unexpected error occurred. Please try again.\");\n      setIsLoading(false); // Set loading state to false\n    }\n  };\n\n  // async function handleVote(index) {\n  //     const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //     await provider.send(\"eth_requestAccounts\", []);\n  //     const signer = provider.getSigner();\n  //     const contractInstance = new ethers.Contract (\n  //         VotingAddress, VotingAbi, signer\n  //       );\n\n  //       const tx = await contractInstance.vote(id, index);\n  //       await tx.wait();\n  //       setCanVote(false);\n  // }\n\n  // Fetch election details when the component mounts or election id changes\n  useEffect(() => {\n    fetchElectionDetails();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Election \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: electionStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), canVote ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [candidate.name, \": \", candidate.voteCount, \" votes\", /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => vote(index),\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You cannot vote in this election.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n}\n_s(VotingPage, \"NIzCCEqK7sxSyX+vC8fo/AlW10Q=\", false, function () {\n  return [useParams];\n});\n_c = VotingPage;\nexport default VotingPage;\nvar _c;\n$RefreshReg$(_c, \"VotingPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","ethers","VotingAddress","VotingAbi","Button","jsxDEV","_jsxDEV","VotingPage","_s","id","candidates","setCandidates","error","setError","canVote","setCanVote","electionStatus","setElectionStatus","signerAddress","setSignerAddress","initializeProvider","console","log","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract","Contract","currentSignerAddress","getAddress","on","accounts","newSignerAddress","err","fetchElectionDetails","election","getElection","fetchedCandidates","getCandidates","formattedCandidates","map","candidate","name","voteCount","toString","currentTime","Math","floor","Date","now","startTime","endTime","toNumber","fetchData","setIsLoading","vote","candidateIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","index","variant","onClick","marginLeft","_c","$RefreshReg$"],"sources":["C:/votingdapp/src/pages/VotingPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ethers } from \"ethers\";\r\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nfunction VotingPage() {\r\n    const { id } = useParams();\r\n    const [candidates, setCandidates] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [canVote, setCanVote] = useState(false);\r\n    const [electionStatus, setElectionStatus] = useState(\"\");\r\n    const [signerAddress, setSignerAddress] = useState(\"\");\r\n\r\n    // Use Web3Provider to connect with MetaMask\r\n    const initializeProvider = async () => {\r\n        try {\r\n            console.log(\"Initializing provider...\");\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n            await provider.send(\"eth_requestAccounts\", []); // Request accounts permission\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n\r\n            const currentSignerAddress = await signer.getAddress();\r\n            setSignerAddress(currentSignerAddress);\r\n            console.log(\"Using account:\", currentSignerAddress);\r\n\r\n            // Listen for account changes and update signerAddress accordingly\r\n            window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n                const newSignerAddress = accounts[0];\r\n                setSignerAddress(newSignerAddress);\r\n                console.log(\"Switched to account:\", newSignerAddress);\r\n            });\r\n\r\n            return { provider, signer, contract };\r\n        } catch (err) {\r\n            setError(\"Failed to initialize provider.\");\r\n            console.error(\"Error initializing provider:\", err);\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    // Fetch election details\r\n    const fetchElectionDetails = async () => {\r\n        try {\r\n            const { contract } = await initializeProvider();\r\n            const election = await contract.getElection(id);\r\n            const fetchedCandidates = await contract.getCandidates(id);\r\n\r\n            const formattedCandidates = fetchedCandidates.map((candidate) => ({\r\n                name: candidate.name,\r\n                voteCount: candidate.voteCount.toString(),\r\n            }));\r\n\r\n            setCandidates(formattedCandidates);\r\n\r\n            const currentTime = Math.floor(Date.now() / 1000); // Get current time in seconds\r\n            console.log(\"Current time (UNIX timestamp):\", currentTime);\r\n            console.log(\"Election start time (UNIX timestamp):\", election.startTime.toString());\r\n            console.log(\"Election end time (UNIX timestamp):\", election.endTime.toString());\r\n\r\n            // Ensure that times are correctly handled as seconds\r\n            if (currentTime < election.startTime.toNumber()) {\r\n                setElectionStatus(\"Election has not started yet.\");\r\n                setCanVote(false);\r\n            } else if (currentTime > election.endTime.toNumber()) {\r\n                setElectionStatus(\"Election has ended.\");\r\n                setCanVote(false);\r\n            } else {\r\n                setElectionStatus(\"Election is ongoing.\");\r\n                setCanVote(true);\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error fetching election details:\", err);\r\n            setError(\"Failed to load election details.\");\r\n        }\r\n    };\r\n\r\n    // Voting function\r\n    // const vote = async (candidateIndex) => {\r\n    //     try {\r\n    //         const { contract } = await initializeProvider();\r\n    \r\n    //         // If the user has already voted, return\r\n    //         const hasVoted = await contract.hasVoted(id, signerAddress);\r\n    //         if (hasVoted) {\r\n    //             setError(\"You have already voted in this election.\");\r\n    //             return;\r\n    //         }\r\n    \r\n    //         // Send the vote transaction\r\n    //         const tx = await contract.vote(id, candidateIndex, {\r\n    //             gasLimit: 3000000,  // Adjust gas if necessary\r\n    //         });\r\n    \r\n    //         // Wait for the transaction to be mined\r\n    //         const receipt = await tx.wait();\r\n    //         console.log(\"Transaction Hash:\", receipt.transactionHash);\r\n    \r\n    //         // Update UI state after voting\r\n    //         setError(\"Successfully voted!\");\r\n    //         fetchElectionDetails();  // Refresh the election details to show updated votes\r\n    \r\n    //     } catch (err) {\r\n    //         console.error(\"Error during voting:\", err);\r\n    //         setError(\"An unexpected error occurred. Please try again.\");\r\n    //     }\r\n    // };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n          setIsLoading(true);\r\n          try {\r\n            const { contract } = await initializeProvider();\r\n            const election = await contract.getElection(id);\r\n            const fetchedCandidates = await contract.getCandidates(id);\r\n    \r\n            // ... (rest of the data processing and state updates)\r\n    \r\n          } catch (err) {\r\n            console.error(\"Error fetching election details:\", err);\r\n            setError(\"Failed to load election details.\");\r\n          } finally {\r\n            setIsLoading(false);\r\n          }\r\n        };\r\n        fetchData();\r\n      }, [id]);\r\n    \r\n      // Voting function with improved error handling\r\n      const vote = async (candidateIndex) => {\r\n        try {\r\n          setIsLoading(true); // Set loading state to true\r\n          const { contract } = await initializeProvider();\r\n    \r\n          // ... (rest of the voting logic)\r\n    \r\n          setError(\"Successfully voted!\");\r\n          setIsLoading(false); // Set loading state to false\r\n        } catch (err) {\r\n          console.error(\"Error during voting:\", err);\r\n          setError(\"An unexpected error occurred. Please try again.\");\r\n          setIsLoading(false); // Set loading state to false\r\n        }\r\n      };\r\n    \r\n\r\n    // async function handleVote(index) {\r\n    //     const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    //     await provider.send(\"eth_requestAccounts\", []);\r\n    //     const signer = provider.getSigner();\r\n    //     const contractInstance = new ethers.Contract (\r\n    //         VotingAddress, VotingAbi, signer\r\n    //       );\r\n          \r\n    //       const tx = await contractInstance.vote(id, index);\r\n    //       await tx.wait();\r\n    //       setCanVote(false);\r\n    // }\r\n\r\n\r\n\r\n    // Fetch election details when the component mounts or election id changes\r\n    useEffect(() => {\r\n        fetchElectionDetails();\r\n    }, [id]);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                \r\n            </div>\r\n            <h1>Election {id}</h1>\r\n            {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n            <p>{electionStatus}</p>\r\n            {canVote ? (\r\n                <ul>\r\n                    {candidates.map((candidate, index) => (\r\n                        <li key={index}>\r\n                            {candidate.name}: {candidate.voteCount} votes\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => vote(index)}\r\n                                style={{ marginLeft: \"10px\" }}\r\n                            >\r\n                                Vote\r\n                            </Button>\r\n                            \r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>You cannot vote in this election.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
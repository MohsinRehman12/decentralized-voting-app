{"ast":null,"code":"var _jsxFileName = \"C:\\\\votingdapp\\\\src\\\\pages\\\\VotingPage.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingAbi } from \"../context/constant\"; // Update your contract ABI and address\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VotingPage() {\n  _s();\n  const [signerAddress, setSignerAddress] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Initialize the provider and contract instance when the component loads\n  useEffect(() => {\n    const initialize = async () => {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n        await provider.send(\"eth_requestAccounts\", []); // Request accounts permission\n        const signer = provider.getSigner();\n        const userAddress = await signer.getAddress();\n        setSignerAddress(userAddress);\n\n        // Create contract instance\n        const contractInstance = new ethers.Contract(VotingAddress, VotingAbi, signer);\n        setContract(contractInstance);\n      } else {\n        setError(\"MetaMask is not installed!\");\n      }\n    };\n    initialize();\n  }, []);\n\n  // Function to vote\n  const vote = async candidateIndex => {\n    if (!contract) {\n      setError(\"Contract not initialized\");\n      return;\n    }\n    try {\n      const tx = await contract.vote(0, candidateIndex); // 0 is the election ID, replace with dynamic ID if needed\n      await tx.wait(); // Wait for transaction confirmation\n      console.log(\"Vote confirmed:\", tx.hash);\n    } catch (err) {\n      setError(\"Error during voting: \" + err.message);\n      console.error(\"Error during voting:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Voting Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected account: \", signerAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => vote(0),\n      children: \"Vote for Candidate 0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(VotingPage, \"lGkNWxcywXgf0jbhalRgxlEEDm8=\");\n_c = VotingPage;\nexport default VotingPage;\nvar _c;\n$RefreshReg$(_c, \"VotingPage\");","map":{"version":3,"names":["useState","useEffect","ethers","VotingAddress","VotingAbi","jsxDEV","_jsxDEV","VotingPage","_s","signerAddress","setSignerAddress","contract","setContract","error","setError","initialize","window","ethereum","provider","providers","Web3Provider","send","signer","getSigner","userAddress","getAddress","contractInstance","Contract","vote","candidateIndex","tx","wait","console","log","hash","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onClick","_c","$RefreshReg$"],"sources":["C:/votingdapp/src/pages/VotingPage.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { VotingAddress, VotingAbi } from \"../context/constant\"; // Update your contract ABI and address\r\n\r\nfunction VotingPage() {\r\n    const [signerAddress, setSignerAddress] = useState(\"\");\r\n    const [contract, setContract] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Initialize the provider and contract instance when the component loads\r\n    useEffect(() => {\r\n        const initialize = async () => {\r\n            if (window.ethereum) {\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n                await provider.send(\"eth_requestAccounts\", []); // Request accounts permission\r\n                const signer = provider.getSigner();\r\n                const userAddress = await signer.getAddress();\r\n                setSignerAddress(userAddress);\r\n\r\n                // Create contract instance\r\n                const contractInstance = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n                setContract(contractInstance);\r\n            } else {\r\n                setError(\"MetaMask is not installed!\");\r\n            }\r\n        };\r\n\r\n        initialize();\r\n    }, []);\r\n\r\n    // Function to vote\r\n    const vote = async (candidateIndex) => {\r\n        if (!contract) {\r\n            setError(\"Contract not initialized\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const tx = await contract.vote(0, candidateIndex); // 0 is the election ID, replace with dynamic ID if needed\r\n            await tx.wait(); // Wait for transaction confirmation\r\n            console.log(\"Vote confirmed:\", tx.hash);\r\n        } catch (err) {\r\n            setError(\"Error during voting: \" + err.message);\r\n            console.error(\"Error during voting:\", err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Voting Page</h1>\r\n            {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n            <p>Connected account: {signerAddress}</p>\r\n            {/* Button for voting, passing candidate index */}\r\n            <button onClick={() => vote(0)}>Vote for Candidate 0</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
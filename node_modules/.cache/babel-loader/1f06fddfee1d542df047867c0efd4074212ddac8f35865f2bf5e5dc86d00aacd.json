{"ast":null,"code":"var _jsxFileName = \"C:\\\\votingdapp\\\\src\\\\pages\\\\VotingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\nimport { Button } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VotingPage() {\n  _s();\n  const {\n    id\n  } = useParams(); // Get election ID from URL\n  const [candidates, setCandidates] = useState([]);\n  const [error, setError] = useState(null);\n  const [electionStatus, setElectionStatus] = useState(\"\");\n  const [canVote, setCanVote] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false);\n  const [signerAddress, setSignerAddress] = useState(\"\");\n\n  // Initialize Web3Provider and connect to MetaMask\n  const initializeProvider = async () => {\n    try {\n      console.log(\"Initializing provider...\");\n      const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\n        name: \"hardhat\",\n        chainId: 31337\n      });\n      await provider.send(\"eth_requestAccounts\", []); // Request accounts permission\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n\n      // Get the current account address\n      const currentSignerAddress = await signer.getAddress();\n      setSignerAddress(currentSignerAddress);\n      console.log(\"Using account:\", currentSignerAddress);\n\n      // Listen for account changes and update signerAddress accordingly\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        const newSignerAddress = accounts[0];\n        setSignerAddress(newSignerAddress);\n        console.log(\"Switched to account:\", newSignerAddress);\n      });\n      return {\n        provider,\n        signer,\n        contract\n      };\n    } catch (err) {\n      setError(\"Failed to initialize provider.\");\n      console.error(\"Error initializing provider:\", err);\n    }\n  };\n\n  // Fetch election details (including candidates)\n  const fetchElectionDetails = async () => {\n    try {\n      const {\n        contract\n      } = await initializeProvider();\n\n      // Fetch election data\n      const election = await contract.getElection(id);\n      const candidatesData = await contract.getCandidates(id);\n      const formattedCandidates = candidatesData.map(candidate => ({\n        name: candidate.name,\n        voteCount: candidate.voteCount.toString()\n      }));\n      setCandidates(formattedCandidates);\n\n      // Check if the election is still active and if the user has voted\n      const currentTime = Math.floor(Date.now() / 1000); // Current time in seconds\n\n      if (currentTime < election.startTime.toNumber()) {\n        setElectionStatus(\"Election has not started yet.\");\n        setCanVote(false);\n      } else if (currentTime > election.endTime.toNumber()) {\n        setElectionStatus(\"Election has ended.\");\n        setCanVote(false);\n      } else {\n        setElectionStatus(\"Election is ongoing.\");\n        setCanVote(true);\n      }\n\n      // Check if the user has already voted\n      const voted = await contract.hasVoted(id, signerAddress);\n      setHasVoted(voted);\n    } catch (err) {\n      console.error(\"Error fetching election details:\", err);\n      setError(\"Failed to load election details.\");\n    }\n  };\n\n  // Handle voting for a candidate\n  const handleVote = async candidateIndex => {\n    try {\n      const {\n        contract\n      } = await initializeProvider();\n      if (hasVoted) {\n        setError(\"You have already voted in this election.\");\n        return;\n      }\n\n      // Call the vote function in the contract\n      const tx = await contract.vote(id, candidateIndex, {\n        gasLimit: 3000000 // Set the gas limit (can be adjusted)\n      });\n\n      // Wait for the transaction to be mined\n      const receipt = await tx.wait();\n      console.log(\"Vote transaction hash:\", receipt.transactionHash);\n      setError(\"Vote successfully cast!\");\n\n      // Refresh election details after voting\n      fetchElectionDetails();\n    } catch (err) {\n      console.error(\"Error during voting:\", err);\n      setError(\"An unexpected error occurred. Please try again.\");\n    }\n  };\n\n  // Fetch election details when the component mounts or election ID changes\n  useEffect(() => {\n    fetchElectionDetails();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Election \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: electionStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), canVote ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Candidates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [candidate.name, \": \", candidate.voteCount, \" votes\", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => handleVote(index),\n            style: {\n              marginLeft: \"10px\"\n            },\n            children: \"Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: hasVoted ? \"You have already voted.\" : \"You cannot vote in this election.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: fetchElectionDetails,\n      style: {\n        marginTop: \"10px\"\n      },\n      children: \"Refresh Election Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n_s(VotingPage, \"r1JI2gYlu4DRyJKirulYUyiJu+A=\", false, function () {\n  return [useParams];\n});\n_c = VotingPage;\nexport default VotingPage;\nvar _c;\n$RefreshReg$(_c, \"VotingPage\");","map":{"version":3,"names":["React","useState","useEffect","ethers","VotingAddress","VotingAbi","Button","useParams","jsxDEV","_jsxDEV","VotingPage","_s","id","candidates","setCandidates","error","setError","electionStatus","setElectionStatus","canVote","setCanVote","hasVoted","setHasVoted","signerAddress","setSignerAddress","initializeProvider","console","log","provider","providers","JsonRpcProvider","name","chainId","send","signer","getSigner","contract","Contract","currentSignerAddress","getAddress","window","ethereum","on","accounts","newSignerAddress","err","fetchElectionDetails","election","getElection","candidatesData","getCandidates","formattedCandidates","map","candidate","voteCount","toString","currentTime","Math","floor","Date","now","startTime","toNumber","endTime","voted","handleVote","candidateIndex","tx","vote","gasLimit","receipt","wait","transactionHash","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","index","variant","onClick","marginLeft","marginTop","_c","$RefreshReg$"],"sources":["C:/votingdapp/src/pages/VotingPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\r\nimport { Button } from \"@mui/material\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction VotingPage() {\r\n    const { id } = useParams(); // Get election ID from URL\r\n    const [candidates, setCandidates] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [electionStatus, setElectionStatus] = useState(\"\");\r\n    const [canVote, setCanVote] = useState(false);\r\n    const [hasVoted, setHasVoted] = useState(false);\r\n    const [signerAddress, setSignerAddress] = useState(\"\");\r\n\r\n    // Initialize Web3Provider and connect to MetaMask\r\n    const initializeProvider = async () => {\r\n        try {\r\n            console.log(\"Initializing provider...\");\r\n            const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\r\n                name: \"hardhat\",\r\n                chainId: 31337,\r\n            });\r\n            await provider.send(\"eth_requestAccounts\", []); // Request accounts permission\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n\r\n            // Get the current account address\r\n            const currentSignerAddress = await signer.getAddress();\r\n            setSignerAddress(currentSignerAddress);\r\n            console.log(\"Using account:\", currentSignerAddress);\r\n\r\n            // Listen for account changes and update signerAddress accordingly\r\n            window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n                const newSignerAddress = accounts[0];\r\n                setSignerAddress(newSignerAddress);\r\n                console.log(\"Switched to account:\", newSignerAddress);\r\n            });\r\n\r\n            return { provider, signer, contract };\r\n        } catch (err) {\r\n            setError(\"Failed to initialize provider.\");\r\n            console.error(\"Error initializing provider:\", err);\r\n        }\r\n    };\r\n\r\n    // Fetch election details (including candidates)\r\n    const fetchElectionDetails = async () => {\r\n        try {\r\n            const { contract } = await initializeProvider();\r\n\r\n            // Fetch election data\r\n            const election = await contract.getElection(id);\r\n            const candidatesData = await contract.getCandidates(id);\r\n\r\n            const formattedCandidates = candidatesData.map((candidate) => ({\r\n                name: candidate.name,\r\n                voteCount: candidate.voteCount.toString(),\r\n            }));\r\n\r\n            setCandidates(formattedCandidates);\r\n\r\n            // Check if the election is still active and if the user has voted\r\n            const currentTime = Math.floor(Date.now() / 1000); // Current time in seconds\r\n\r\n            if (currentTime < election.startTime.toNumber()) {\r\n                setElectionStatus(\"Election has not started yet.\");\r\n                setCanVote(false);\r\n            } else if (currentTime > election.endTime.toNumber()) {\r\n                setElectionStatus(\"Election has ended.\");\r\n                setCanVote(false);\r\n            } else {\r\n                setElectionStatus(\"Election is ongoing.\");\r\n                setCanVote(true);\r\n            }\r\n\r\n            // Check if the user has already voted\r\n            const voted = await contract.hasVoted(id, signerAddress);\r\n            setHasVoted(voted);\r\n\r\n        } catch (err) {\r\n            console.error(\"Error fetching election details:\", err);\r\n            setError(\"Failed to load election details.\");\r\n        }\r\n    };\r\n\r\n    // Handle voting for a candidate\r\n    const handleVote = async (candidateIndex) => {\r\n        try {\r\n            const { contract } = await initializeProvider();\r\n\r\n            if (hasVoted) {\r\n                setError(\"You have already voted in this election.\");\r\n                return;\r\n            }\r\n\r\n            // Call the vote function in the contract\r\n            const tx = await contract.vote(id, candidateIndex, {\r\n                gasLimit: 3000000, // Set the gas limit (can be adjusted)\r\n            });\r\n\r\n            // Wait for the transaction to be mined\r\n            const receipt = await tx.wait();\r\n            console.log(\"Vote transaction hash:\", receipt.transactionHash);\r\n\r\n            setError(\"Vote successfully cast!\");\r\n\r\n            // Refresh election details after voting\r\n            fetchElectionDetails();\r\n        } catch (err) {\r\n            console.error(\"Error during voting:\", err);\r\n            setError(\"An unexpected error occurred. Please try again.\");\r\n        }\r\n    };\r\n\r\n    // Fetch election details when the component mounts or election ID changes\r\n    useEffect(() => {\r\n        fetchElectionDetails();\r\n    }, [id]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Election {id}</h1>\r\n            {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n            <p>{electionStatus}</p>\r\n            {canVote ? (\r\n                <div>\r\n                    <h3>Candidates</h3>\r\n                    <ul>\r\n                        {candidates.map((candidate, index) => (\r\n                            <li key={index}>\r\n                                {candidate.name}: {candidate.voteCount} votes\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => handleVote(index)}\r\n                                    style={{ marginLeft: \"10px\" }}\r\n                                >\r\n                                    Vote\r\n                                </Button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            ) : (\r\n                <p>{hasVoted ? \"You have already voted.\" : \"You cannot vote in this election.\"}</p>\r\n            )}\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={fetchElectionDetails}\r\n                style={{ marginTop: \"10px\" }}\r\n            >\r\n                Refresh Election Details\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\votingdapp\\\\src\\\\pages\\\\VotingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingAbi } from \"./context/constant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VotingPage() {\n  _s();\n  const {\n    electionId\n  } = useParams(); // Get electionId from the URL\n  const [candidates, setCandidates] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [isElectionOver, setIsElectionOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchElectionData = async () => {\n      try {\n        const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n        const contract = new ethers.Contract(VotingAddress, VotingAbi, provider);\n        const data = await contract.getCandidates(electionId);\n        const formattedCandidates = data.map(candidate => ({\n          name: candidate.name,\n          voteCount: candidate.voteCount.toString()\n        }));\n        setCandidates(formattedCandidates);\n        const election = await contract.getElection(electionId);\n        const currentTime = Math.floor(Date.now() / 1000);\n        if (currentTime > election.endTime) {\n          setIsElectionOver(true);\n\n          // Fetch the winner if the election has ended\n          const [winningCandidate, winningVotes] = await contract.getWinner(electionId);\n          setWinner({\n            name: winningCandidate,\n            votes: winningVotes.toString()\n          });\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching election data:\", error);\n      }\n    };\n    fetchElectionData();\n  }, [electionId]);\n  const handleVote = async candidateIndex => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n      const tx = await contract.vote(electionId, candidateIndex);\n      await tx.wait();\n      alert(\"Vote successfully cast!\");\n      window.location.reload(); // Reload to fetch updated data\n    } catch (error) {\n      console.error(\"Error during voting:\", error);\n      alert(\"Failed to cast vote. Please try again.\");\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading election data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Election \", electionId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), isElectionOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Election Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Winner:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), \" \", winner === null || winner === void 0 ? void 0 : winner.name, \" (\", winner === null || winner === void 0 ? void 0 : winner.votes, \" votes)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Candidates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [candidate.name, \": \", candidate.voteCount, \" votes\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleVote(index),\n            children: \"Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(VotingPage, \"hU3QL/uKgI/W3j7PB/bv4N7YK3A=\", false, function () {\n  return [useParams];\n});\n_c = VotingPage;\nexport default VotingPage;\nvar _c;\n$RefreshReg$(_c, \"VotingPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","ethers","VotingAddress","VotingAbi","jsxDEV","_jsxDEV","VotingPage","_s","electionId","candidates","setCandidates","winner","setWinner","isElectionOver","setIsElectionOver","loading","setLoading","fetchElectionData","provider","providers","JsonRpcProvider","contract","Contract","data","getCandidates","formattedCandidates","map","candidate","name","voteCount","toString","election","getElection","currentTime","Math","floor","Date","now","endTime","winningCandidate","winningVotes","getWinner","votes","error","console","handleVote","candidateIndex","Web3Provider","window","ethereum","signer","getSigner","tx","vote","wait","alert","location","reload","children","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","_c","$RefreshReg$"],"sources":["C:/votingdapp/src/pages/VotingPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ethers } from \"ethers\";\r\nimport { VotingAddress, VotingAbi } from \"./context/constant\";\r\n\r\nfunction VotingPage() {\r\n    const { electionId } = useParams(); // Get electionId from the URL\r\n    const [candidates, setCandidates] = useState([]);\r\n    const [winner, setWinner] = useState(null);\r\n    const [isElectionOver, setIsElectionOver] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchElectionData = async () => {\r\n            try {\r\n                const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\r\n                const contract = new ethers.Contract(VotingAddress, VotingAbi, provider);\r\n\r\n                const data = await contract.getCandidates(electionId);\r\n                const formattedCandidates = data.map((candidate) => ({\r\n                    name: candidate.name,\r\n                    voteCount: candidate.voteCount.toString(),\r\n                }));\r\n\r\n                setCandidates(formattedCandidates);\r\n\r\n                const election = await contract.getElection(electionId);\r\n                const currentTime = Math.floor(Date.now() / 1000);\r\n\r\n                if (currentTime > election.endTime) {\r\n                    setIsElectionOver(true);\r\n\r\n                    // Fetch the winner if the election has ended\r\n                    const [winningCandidate, winningVotes] = await contract.getWinner(electionId);\r\n                    setWinner({ name: winningCandidate, votes: winningVotes.toString() });\r\n                }\r\n\r\n                setLoading(false);\r\n            } catch (error) {\r\n                console.error(\"Error fetching election data:\", error);\r\n            }\r\n        };\r\n\r\n        fetchElectionData();\r\n    }, [electionId]);\r\n\r\n    const handleVote = async (candidateIndex) => {\r\n        try {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n\r\n            const tx = await contract.vote(electionId, candidateIndex);\r\n            await tx.wait();\r\n\r\n            alert(\"Vote successfully cast!\");\r\n            window.location.reload(); // Reload to fetch updated data\r\n        } catch (error) {\r\n            console.error(\"Error during voting:\", error);\r\n            alert(\"Failed to cast vote. Please try again.\");\r\n        }\r\n    };\r\n\r\n    if (loading) return <p>Loading election data...</p>;\r\n\r\n    return (\r\n        <div>\r\n            <h1>Election {electionId}</h1>\r\n            {isElectionOver ? (\r\n                <div>\r\n                    <h2>Election Over</h2>\r\n                    <p>\r\n                        <strong>Winner:</strong> {winner?.name} ({winner?.votes} votes)\r\n                    </p>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <h2>Candidates</h2>\r\n                    <ul>\r\n                        {candidates.map((candidate, index) => (\r\n                            <li key={index}>\r\n                                {candidate.name}: {candidate.voteCount} votes\r\n                                <button onClick={() => handleVote(index)}>Vote</button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,aAAa,EAAEC,SAAS,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM;IAAEC;EAAW,CAAC,GAAGR,SAAS,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ,MAAMkB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACA,MAAMC,QAAQ,GAAG,IAAIjB,MAAM,CAACkB,SAAS,CAACC,eAAe,CAAC,uBAAuB,CAAC;QAC9E,MAAMC,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,QAAQ,CAACpB,aAAa,EAAEC,SAAS,EAAEe,QAAQ,CAAC;QAExE,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,aAAa,CAAChB,UAAU,CAAC;QACrD,MAAMiB,mBAAmB,GAAGF,IAAI,CAACG,GAAG,CAAEC,SAAS,KAAM;UACjDC,IAAI,EAAED,SAAS,CAACC,IAAI;UACpBC,SAAS,EAAEF,SAAS,CAACE,SAAS,CAACC,QAAQ,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEHpB,aAAa,CAACe,mBAAmB,CAAC;QAElC,MAAMM,QAAQ,GAAG,MAAMV,QAAQ,CAACW,WAAW,CAACxB,UAAU,CAAC;QACvD,MAAMyB,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;QAEjD,IAAIJ,WAAW,GAAGF,QAAQ,CAACO,OAAO,EAAE;UAChCxB,iBAAiB,CAAC,IAAI,CAAC;;UAEvB;UACA,MAAM,CAACyB,gBAAgB,EAAEC,YAAY,CAAC,GAAG,MAAMnB,QAAQ,CAACoB,SAAS,CAACjC,UAAU,CAAC;UAC7EI,SAAS,CAAC;YAAEgB,IAAI,EAAEW,gBAAgB;YAAEG,KAAK,EAAEF,YAAY,CAACV,QAAQ,CAAC;UAAE,CAAC,CAAC;QACzE;QAEAd,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAO2B,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACzD;IACJ,CAAC;IAED1B,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACT,UAAU,CAAC,CAAC;EAEhB,MAAMqC,UAAU,GAAG,MAAOC,cAAc,IAAK;IACzC,IAAI;MACA,MAAM5B,QAAQ,GAAG,IAAIjB,MAAM,CAACkB,SAAS,CAAC4B,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;MACnE,MAAMC,MAAM,GAAGhC,QAAQ,CAACiC,SAAS,CAAC,CAAC;MACnC,MAAM9B,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,QAAQ,CAACpB,aAAa,EAAEC,SAAS,EAAE+C,MAAM,CAAC;MAEtE,MAAME,EAAE,GAAG,MAAM/B,QAAQ,CAACgC,IAAI,CAAC7C,UAAU,EAAEsC,cAAc,CAAC;MAC1D,MAAMM,EAAE,CAACE,IAAI,CAAC,CAAC;MAEfC,KAAK,CAAC,yBAAyB,CAAC;MAChCP,MAAM,CAACQ,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOd,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CY,KAAK,CAAC,wCAAwC,CAAC;IACnD;EACJ,CAAC;EAED,IAAIxC,OAAO,EAAE,oBAAOV,OAAA;IAAAqD,QAAA,EAAG;EAAwB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAEnD,oBACIzD,OAAA;IAAAqD,QAAA,gBACIrD,OAAA;MAAAqD,QAAA,GAAI,WAAS,EAAClD,UAAU;IAAA;MAAAmD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAC7BjD,cAAc,gBACXR,OAAA;MAAAqD,QAAA,gBACIrD,OAAA;QAAAqD,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBzD,OAAA;QAAAqD,QAAA,gBACIrD,OAAA;UAAAqD,QAAA,EAAQ;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACnD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEiB,IAAI,EAAC,IAAE,EAACjB,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE+B,KAAK,EAAC,SAC5D;MAAA;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,gBAENzD,OAAA;MAAAqD,QAAA,gBACIrD,OAAA;QAAAqD,QAAA,EAAI;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnBzD,OAAA;QAAAqD,QAAA,EACKjD,UAAU,CAACiB,GAAG,CAAC,CAACC,SAAS,EAAEoC,KAAK,kBAC7B1D,OAAA;UAAAqD,QAAA,GACK/B,SAAS,CAACC,IAAI,EAAC,IAAE,EAACD,SAAS,CAACE,SAAS,EAAC,QACvC,eAAAxB,OAAA;YAAQ2D,OAAO,EAAEA,CAAA,KAAMnB,UAAU,CAACkB,KAAK,CAAE;YAAAL,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAFlDC,KAAK;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGV,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACvD,EAAA,CArFQD,UAAU;EAAA,QACQN,SAAS;AAAA;AAAAiE,EAAA,GAD3B3D,UAAU;AAuFnB,eAAeA,UAAU;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
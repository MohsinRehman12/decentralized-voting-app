{"ast":null,"code":"const fetchElectionDetails = async () => {\n  try {\n    const {\n      contract\n    } = await initializeProvider();\n\n    // Fetch election details\n    const election = await contract.getElection(id);\n    const fetchedCandidates = await contract.getCandidates(id);\n\n    // Format candidates\n    const formattedCandidates = fetchedCandidates.map(candidate => ({\n      name: candidate.name,\n      voteCount: candidate.voteCount.toString()\n    }));\n    setCandidates(formattedCandidates);\n\n    // Handle election timing\n    const currentTime = Math.floor(Date.now() / 1000);\n    if (currentTime < election.startTime) {\n      setElectionStatus(\"Election has not started yet.\");\n      setCanVote(false);\n    } else if (currentTime > election.endTime) {\n      setElectionStatus(\"Election has ended.\");\n      setCanVote(false);\n    } else {\n      setElectionStatus(\"Election is ongoing.\");\n      setCanVote(true);\n    }\n  } catch (err) {\n    console.error(\"Error fetching election details:\", err);\n    setError(\"Failed to load election details.\");\n  }\n};\nuseEffect(() => {\n  fetchElectionDetails();\n  checkCanVote();\n}, [id]);","map":{"version":3,"names":["fetchElectionDetails","contract","initializeProvider","election","getElection","id","fetchedCandidates","getCandidates","formattedCandidates","map","candidate","name","voteCount","toString","setCandidates","currentTime","Math","floor","Date","now","startTime","setElectionStatus","setCanVote","endTime","err","console","error","setError","useEffect","checkCanVote"],"sources":["C:/votingdapp/src/pages/VotingPage.jsx"],"sourcesContent":["const fetchElectionDetails = async () => {\r\n    try {\r\n        const { contract } = await initializeProvider();\r\n\r\n        // Fetch election details\r\n        const election = await contract.getElection(id);\r\n        const fetchedCandidates = await contract.getCandidates(id);\r\n\r\n        // Format candidates\r\n        const formattedCandidates = fetchedCandidates.map((candidate) => ({\r\n            name: candidate.name,\r\n            voteCount: candidate.voteCount.toString(),\r\n        }));\r\n\r\n        setCandidates(formattedCandidates);\r\n\r\n        // Handle election timing\r\n        const currentTime = Math.floor(Date.now() / 1000);\r\n        if (currentTime < election.startTime) {\r\n            setElectionStatus(\"Election has not started yet.\");\r\n            setCanVote(false);\r\n        } else if (currentTime > election.endTime) {\r\n            setElectionStatus(\"Election has ended.\");\r\n            setCanVote(false);\r\n        } else {\r\n            setElectionStatus(\"Election is ongoing.\");\r\n            setCanVote(true);\r\n        }\r\n    } catch (err) {\r\n        console.error(\"Error fetching election details:\", err);\r\n        setError(\"Failed to load election details.\");\r\n    }\r\n};\r\n\r\nuseEffect(() => {\r\n    fetchElectionDetails();\r\n    checkCanVote();\r\n}, [id]);\r\n"],"mappings":"AAAA,MAAMA,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACA,MAAM;MAAEC;IAAS,CAAC,GAAG,MAAMC,kBAAkB,CAAC,CAAC;;IAE/C;IACA,MAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,WAAW,CAACC,EAAE,CAAC;IAC/C,MAAMC,iBAAiB,GAAG,MAAML,QAAQ,CAACM,aAAa,CAACF,EAAE,CAAC;;IAE1D;IACA,MAAMG,mBAAmB,GAAGF,iBAAiB,CAACG,GAAG,CAAEC,SAAS,KAAM;MAC9DC,IAAI,EAAED,SAAS,CAACC,IAAI;MACpBC,SAAS,EAAEF,SAAS,CAACE,SAAS,CAACC,QAAQ,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEHC,aAAa,CAACN,mBAAmB,CAAC;;IAElC;IACA,MAAMO,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IACjD,IAAIJ,WAAW,GAAGZ,QAAQ,CAACiB,SAAS,EAAE;MAClCC,iBAAiB,CAAC,+BAA+B,CAAC;MAClDC,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,MAAM,IAAIP,WAAW,GAAGZ,QAAQ,CAACoB,OAAO,EAAE;MACvCF,iBAAiB,CAAC,qBAAqB,CAAC;MACxCC,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,MAAM;MACHD,iBAAiB,CAAC,sBAAsB,CAAC;MACzCC,UAAU,CAAC,IAAI,CAAC;IACpB;EACJ,CAAC,CAAC,OAAOE,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,GAAG,CAAC;IACtDG,QAAQ,CAAC,kCAAkC,CAAC;EAChD;AACJ,CAAC;AAEDC,SAAS,CAAC,MAAM;EACZ5B,oBAAoB,CAAC,CAAC;EACtB6B,YAAY,CAAC,CAAC;AAClB,CAAC,EAAE,CAACxB,EAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
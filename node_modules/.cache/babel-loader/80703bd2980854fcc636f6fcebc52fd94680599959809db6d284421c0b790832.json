{"ast":null,"code":"var _jsxFileName = \"C:\\\\votingdapp\\\\src\\\\pages\\\\VotingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ethers } from \"ethers\";\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\nimport { Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VotingPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [candidates, setCandidates] = useState([]);\n  const [error, setError] = useState(null);\n  const [canVote, setCanVote] = useState(false);\n  const [electionStatus, setElectionStatus] = useState(\"\");\n  const [signerAddress, setSignerAddress] = useState(\"\");\n\n  // Use JsonRpcProvider to connect to Hardhat network directly\n  const initializeProvider = async () => {\n    try {\n      console.log(\"Initializing provider...\");\n      const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\n        name: \"hardhat\",\n        chainId: 31337\n      });\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\n      const signerAddress = await signer.getAddress();\n      console.log(\"Using account:\", signerAddress); // Log current account\n      setSignerAddress(signerAddress);\n      return {\n        provider,\n        signer,\n        contract\n      };\n    } catch (err) {\n      setError(\"Failed to initialize provider.\");\n      console.error(\"Error initializing provider:\", err);\n    }\n  };\n\n  // Listen for account change in MetaMask\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", async accounts => {\n        if (accounts.length > 0) {\n          console.log(\"Account switched to:\", accounts[0]);\n          // Update signer address with the new account\n          setSignerAddress(accounts[0]);\n          // Reinitialize the provider with the new account\n          await fetchElectionDetails();\n        }\n      });\n\n      // Handle account change on page load if already switched\n      window.ethereum.request({\n        method: \"eth_accounts\"\n      }).then(accounts => {\n        if (accounts.length > 0) {\n          setSignerAddress(accounts[0]);\n          fetchElectionDetails(); // Fetch election details for the current account\n        }\n      });\n    }\n  }, []);\n\n  // Fetch election details\n  const fetchElectionDetails = async () => {\n    try {\n      const {\n        contract\n      } = await initializeProvider();\n      const election = await contract.getElection(id);\n      const fetchedCandidates = await contract.getCandidates(id);\n      const formattedCandidates = fetchedCandidates.map(candidate => ({\n        name: candidate.name,\n        voteCount: candidate.voteCount.toString()\n      }));\n      setCandidates(formattedCandidates);\n      const currentTime = Math.floor(Date.now() / 1000); // Get current time in seconds\n      console.log(\"Current time (UNIX timestamp):\", currentTime);\n      console.log(\"Election start time (UNIX timestamp):\", election.startTime.toString());\n      console.log(\"Election end time (UNIX timestamp):\", election.endTime.toString());\n\n      // Ensure that times are correctly handled as seconds\n      if (currentTime < election.startTime.toNumber()) {\n        setElectionStatus(\"Election has not started yet.\");\n        setCanVote(false);\n      } else if (currentTime > election.endTime.toNumber()) {\n        setElectionStatus(\"Election has ended.\");\n        setCanVote(false);\n      } else {\n        setElectionStatus(\"Election is ongoing.\");\n        setCanVote(true);\n      }\n    } catch (err) {\n      console.error(\"Error fetching election details:\", err);\n      setError(\"Failed to load election details.\");\n    }\n  };\n\n  // Voting function\n  const vote = async candidateIndex => {\n    try {\n      const {\n        contract\n      } = await initializeProvider();\n      const hasVoted = await contract.hasVoted(id, signerAddress);\n      console.log(\"Has the current account voted?\", hasVoted); // Log whether the current account has voted\n\n      if (hasVoted) {\n        setError(\"You have already voted in this election.\");\n        setCanVote(false);\n        return;\n      }\n      if (candidateIndex < 0 || candidateIndex >= candidates.length) {\n        setError(\"Invalid candidate index.\");\n        return;\n      }\n      const election = await contract.getElection(id);\n      const currentTime = Math.floor(Date.now() / 1000); // Get current time in seconds\n      console.log(\"Current time (UNIX timestamp):\", currentTime);\n      console.log(\"Election start time (UNIX timestamp):\", election.startTime.toNumber());\n\n      // Ensure the election start time and current time are compared correctly\n      if (currentTime < election.startTime.toNumber() || currentTime > election.endTime.toNumber()) {\n        setError(\"Election is not in valid voting period.\");\n        return;\n      }\n\n      // Estimate gas\n      let gasEstimate;\n      try {\n        gasEstimate = await contract.estimateGas.vote(id, candidateIndex);\n        console.log(\"Gas Estimate:\", gasEstimate.toString());\n      } catch (gasErr) {\n        console.error(\"Gas estimation failed, using fallback gas limit\", gasErr);\n        gasEstimate = ethers.BigNumber.from(\"1000000\"); // Fallback to a reasonable limit under block limit\n      }\n\n      // Send the transaction and get the transaction hash\n      const tx = await contract.vote(id, candidateIndex, {\n        gasLimit: gasEstimate\n      });\n\n      // Wait for transaction to be mined\n      const receipt = await tx.wait();\n      console.log(\"Transaction Hash:\", receipt.transactionHash);\n      setError(\"Successfully voted!\");\n      fetchElectionDetails(); // Refresh election details after voting\n    } catch (err) {\n      console.error(\"Error during voting:\", err);\n      if (err.code === -32603) {\n        setError(\"Transaction failed. Make sure the election is within voting period.\");\n      } else {\n        setError(\"An unexpected error occurred. Please try again.\");\n      }\n    }\n  };\n\n  // Fetch election details when the component mounts or election id changes\n  useEffect(() => {\n    fetchElectionDetails();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Election \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: electionStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), canVote ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: candidates.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [candidate.name, \": \", candidate.voteCount, \" votes\", /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => vote(index),\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You cannot vote in this election.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n}\n_s(VotingPage, \"NIzCCEqK7sxSyX+vC8fo/AlW10Q=\", false, function () {\n  return [useParams];\n});\n_c = VotingPage;\nexport default VotingPage;\nvar _c;\n$RefreshReg$(_c, \"VotingPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","ethers","VotingAddress","VotingAbi","Button","jsxDEV","_jsxDEV","VotingPage","_s","id","candidates","setCandidates","error","setError","canVote","setCanVote","electionStatus","setElectionStatus","signerAddress","setSignerAddress","initializeProvider","console","log","provider","providers","JsonRpcProvider","name","chainId","signer","getSigner","contract","Contract","getAddress","err","window","ethereum","on","accounts","length","fetchElectionDetails","request","method","then","election","getElection","fetchedCandidates","getCandidates","formattedCandidates","map","candidate","voteCount","toString","currentTime","Math","floor","Date","now","startTime","endTime","toNumber","vote","candidateIndex","hasVoted","gasEstimate","estimateGas","gasErr","BigNumber","from","tx","gasLimit","receipt","wait","transactionHash","code","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","index","variant","onClick","marginLeft","_c","$RefreshReg$"],"sources":["C:/votingdapp/src/pages/VotingPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ethers } from \"ethers\";\r\nimport { VotingAddress, VotingAbi } from \"../context/constant\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nfunction VotingPage() {\r\n    const { id } = useParams();\r\n    const [candidates, setCandidates] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [canVote, setCanVote] = useState(false);\r\n    const [electionStatus, setElectionStatus] = useState(\"\");\r\n    const [signerAddress, setSignerAddress] = useState(\"\");\r\n\r\n    // Use JsonRpcProvider to connect to Hardhat network directly\r\n    const initializeProvider = async () => {\r\n        try {\r\n            console.log(\"Initializing provider...\");\r\n            const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\", {\r\n                name: \"hardhat\",\r\n                chainId: 31337,\r\n            });\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(VotingAddress, VotingAbi, signer);\r\n\r\n            const signerAddress = await signer.getAddress();\r\n            console.log(\"Using account:\", signerAddress);  // Log current account\r\n            setSignerAddress(signerAddress);\r\n\r\n            return { provider, signer, contract };\r\n        } catch (err) {\r\n            setError(\"Failed to initialize provider.\");\r\n            console.error(\"Error initializing provider:\", err);\r\n        }\r\n    };\r\n\r\n    // Listen for account change in MetaMask\r\n    useEffect(() => {\r\n        if (window.ethereum) {\r\n            window.ethereum.on(\"accountsChanged\", async (accounts) => {\r\n                if (accounts.length > 0) {\r\n                    console.log(\"Account switched to:\", accounts[0]);\r\n                    // Update signer address with the new account\r\n                    setSignerAddress(accounts[0]);\r\n                    // Reinitialize the provider with the new account\r\n                    await fetchElectionDetails();\r\n                }\r\n            });\r\n\r\n            // Handle account change on page load if already switched\r\n            window.ethereum.request({ method: \"eth_accounts\" }).then((accounts) => {\r\n                if (accounts.length > 0) {\r\n                    setSignerAddress(accounts[0]);\r\n                    fetchElectionDetails();  // Fetch election details for the current account\r\n                }\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    // Fetch election details\r\n    const fetchElectionDetails = async () => {\r\n        try {\r\n            const { contract } = await initializeProvider();\r\n            const election = await contract.getElection(id);\r\n            const fetchedCandidates = await contract.getCandidates(id);\r\n\r\n            const formattedCandidates = fetchedCandidates.map((candidate) => ({\r\n                name: candidate.name,\r\n                voteCount: candidate.voteCount.toString(),\r\n            }));\r\n\r\n            setCandidates(formattedCandidates);\r\n\r\n            const currentTime = Math.floor(Date.now() / 1000); // Get current time in seconds\r\n            console.log(\"Current time (UNIX timestamp):\", currentTime);\r\n            console.log(\"Election start time (UNIX timestamp):\", election.startTime.toString());\r\n            console.log(\"Election end time (UNIX timestamp):\", election.endTime.toString());\r\n\r\n            // Ensure that times are correctly handled as seconds\r\n            if (currentTime < election.startTime.toNumber()) {\r\n                setElectionStatus(\"Election has not started yet.\");\r\n                setCanVote(false);\r\n            } else if (currentTime > election.endTime.toNumber()) {\r\n                setElectionStatus(\"Election has ended.\");\r\n                setCanVote(false);\r\n            } else {\r\n                setElectionStatus(\"Election is ongoing.\");\r\n                setCanVote(true);\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error fetching election details:\", err);\r\n            setError(\"Failed to load election details.\");\r\n        }\r\n    };\r\n\r\n    // Voting function\r\n    const vote = async (candidateIndex) => {\r\n        try {\r\n            const { contract } = await initializeProvider();\r\n\r\n            const hasVoted = await contract.hasVoted(id, signerAddress);\r\n            console.log(\"Has the current account voted?\", hasVoted);  // Log whether the current account has voted\r\n\r\n            if (hasVoted) {\r\n                setError(\"You have already voted in this election.\");\r\n                setCanVote(false);\r\n                return;\r\n            }\r\n\r\n            if (candidateIndex < 0 || candidateIndex >= candidates.length) {\r\n                setError(\"Invalid candidate index.\");\r\n                return;\r\n            }\r\n\r\n            const election = await contract.getElection(id);\r\n            const currentTime = Math.floor(Date.now() / 1000); // Get current time in seconds\r\n            console.log(\"Current time (UNIX timestamp):\", currentTime);\r\n            console.log(\"Election start time (UNIX timestamp):\", election.startTime.toNumber());\r\n\r\n            // Ensure the election start time and current time are compared correctly\r\n            if (currentTime < election.startTime.toNumber() || currentTime > election.endTime.toNumber()) {\r\n                setError(\"Election is not in valid voting period.\");\r\n                return;\r\n            }\r\n\r\n            // Estimate gas\r\n            let gasEstimate;\r\n            try {\r\n                gasEstimate = await contract.estimateGas.vote(id, candidateIndex);\r\n                console.log(\"Gas Estimate:\", gasEstimate.toString());\r\n            } catch (gasErr) {\r\n                console.error(\"Gas estimation failed, using fallback gas limit\", gasErr);\r\n                gasEstimate = ethers.BigNumber.from(\"1000000\");  // Fallback to a reasonable limit under block limit\r\n            }\r\n\r\n            // Send the transaction and get the transaction hash\r\n            const tx = await contract.vote(id, candidateIndex, { gasLimit: gasEstimate });\r\n\r\n            // Wait for transaction to be mined\r\n            const receipt = await tx.wait();\r\n            console.log(\"Transaction Hash:\", receipt.transactionHash);\r\n            setError(\"Successfully voted!\");\r\n\r\n            fetchElectionDetails();  // Refresh election details after voting\r\n        } catch (err) {\r\n            console.error(\"Error during voting:\", err);\r\n            if (err.code === -32603) {\r\n                setError(\"Transaction failed. Make sure the election is within voting period.\");\r\n            } else {\r\n                setError(\"An unexpected error occurred. Please try again.\");\r\n            }\r\n        }\r\n    };\r\n\r\n    // Fetch election details when the component mounts or election id changes\r\n    useEffect(() => {\r\n        fetchElectionDetails();\r\n    }, [id]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Election {id}</h1>\r\n            {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n            <p>{electionStatus}</p>\r\n            {canVote ? (\r\n                <ul>\r\n                    {candidates.map((candidate, index) => (\r\n                        <li key={index}>\r\n                            {candidate.name}: {candidate.voteCount} votes\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => vote(index)}\r\n                                style={{ marginLeft: \"10px\" }}\r\n                            >\r\n                                Vote\r\n                            </Button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>You cannot vote in this election.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}